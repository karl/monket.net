<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Karl O'Keeffe's Blog</title>
    <atom:link href="//feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>/</link>
    <description></description>
    <pubDate>Mon, 12 Apr 2010 14:11:21 +0100</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Small Update to Loris (0.1.3)</title>
      <link>//blog/articles/small-update-to-loris-0-1-3/</link>
      <pubDate>Mon, 12 Apr 2010 14:11:21 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/small-update-to-loris-0-1-3/</guid>
      <author></author>
      <description>&lt;p&gt;A few months ago &lt;a href=&quot;/articles/loris-autotest-for-javascript/&quot;&gt;I wrote about Loris&lt;/a&gt;, a small tool that will automatically run your javascript tests whenever a file changes.&lt;/p&gt;
&lt;p&gt;I’ve just released a new version of the &lt;a href=&quot;http://rubygems.org/gems/loris&quot;&gt;Loris gem&lt;/a&gt; with a couple of minor fixes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The dependency on &lt;code&gt;win32-process&lt;/code&gt; has now been removed from the gem. This means the gem now installs correctly on OSX. Windows users will manually need to install the &lt;code&gt;win32-process&lt;/code&gt; gem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The dependancy on &lt;code&gt;visionmedia-bind&lt;/code&gt; has been updated to just &lt;code&gt;bind&lt;/code&gt;, reflecting the gems new name on RubyGems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The JS Test Driver server is now reset between all tests. This stops it getting into a situation where it failed to pick up changes to files.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because &lt;a href=&quot;http://rubygems.org/&quot;&gt;RubyGems&lt;/a&gt; is now the default gem host, this install process is a little simpler.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;sudo gem install loris
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or on Windows&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;gem install loris
gem install win32-process
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>QUnitAdapter 1.1.0</title>
      <link>//blog/articles/qunitadapter-1-1-0/</link>
      <pubDate>Fri, 09 Apr 2010 13:22:00 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/qunitadapter-1-1-0/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve updated the JS Test Driver &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/QUnitAdapter&quot;&gt;QUnitAdapter&lt;/a&gt; to improve compatibility with QUnit.&lt;/p&gt;
&lt;p&gt;Variables set on the &lt;code&gt;this&lt;/code&gt; object within are now available within setup, teardown, and the tests themselves.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'Lifecycle'&lt;/span&gt;, {
  setup: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mockString = &lt;span class=&quot;string&quot;&gt;&quot;some string&quot;&lt;/span&gt;;
  },
  teardown: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    equals(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mockString, &lt;span class=&quot;string&quot;&gt;&quot;some string&quot;&lt;/span&gt;);
  }
});

test(&lt;span class=&quot;string&quot;&gt;&quot;Things assigned to this in setup are available in test&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  equals(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mockString, &lt;span class=&quot;string&quot;&gt;&quot;some string&quot;&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;test&lt;/code&gt; function now supports the optional second parameter of the expected number of assertions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// declare that this test has expects 1 assertion&lt;/span&gt;
test(&lt;span class=&quot;string&quot;&gt;'Test with expected defined as 2nd param'&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
  ok(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My thanks go to &lt;code&gt;anotherhero&lt;/code&gt; for providing the &lt;a href=&quot;http://code.google.com/p/js-test-driver/issues/detail?id=116&quot;&gt;patch&lt;/a&gt; to fix both these issues.&lt;/p&gt;
&lt;p&gt;You can always &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/QUnitAdapter&quot;&gt;download the latest version of QUnitAdapter from Google Code&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Detecting when a page is loaded from the browser cache</title>
      <link>//blog/articles/detecting-when-a-page-is-loaded-from-the-browser-cache/</link>
      <pubDate>Fri, 12 Feb 2010 13:55:50 +0000</pubDate>
      <guid isPermaLink="true">//blog/articles/detecting-when-a-page-is-loaded-from-the-browser-cache/</guid>
      <author></author>
      <description>&lt;p&gt;When a user presses the back button in their browser to return to a previous page, that page is usually loaded straight from the browser’s cache, without any requests being made to the server. When that page shows information that could be out of date (such a an old list of products in your basket) this can cause problems.&lt;/p&gt;
&lt;p&gt;So how about we knock up a little code that allows us to determine whether the page has been loaded from the server or the browsers cache. Then we can reload those parts of the page that may need updating (such as the basket).&lt;/p&gt;
&lt;p&gt;We can do this by setting a cookie on every response from the server, and modifying that cookie using javascript. We can then use this cookie to know whether the page has been loaded from the server or the browser cache.&lt;/p&gt;
&lt;h2 id=&quot;setting-the-cookie-on-every-response-from-the-server&quot;&gt;Setting the cookie on every response from the server&lt;/h2&gt;
&lt;p&gt;We will use a &lt;code&gt;loadedFromBrowserCache&lt;/code&gt; cookie to facilitate the cache detection. We will set it to &lt;code&gt;false&lt;/code&gt; every time a page is loaded from the server.&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;BrowserCacheIndicator&lt;/code&gt; class below to manage the cookie.&lt;/p&gt;
&lt;h3 id=&quot;browsercacheindicator-cs&quot;&gt;BrowserCacheIndicator.cs&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;lang-csharp&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System.Web;

&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SevenDigital.Web.Com.Code&lt;/span&gt; {
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BrowserCacheIndicator&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; CACHE_COOKIE = &lt;span class=&quot;string&quot;&gt;&quot;loadedFromBrowserCache&quot;&lt;/span&gt;;

        &lt;span class=&quot;comment&quot;&gt;// This works with the javascript on the site to determine whether&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// a page has been loaded from the browser cache&lt;/span&gt;

        &lt;span class=&quot;comment&quot;&gt;// *Every time* a page is loaded from the server we need to set&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// the loadedFromBrowserCache cookie to false&lt;/span&gt;

        &lt;span class=&quot;comment&quot;&gt;// This method should be called in all Master Pages&lt;/span&gt;
        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClearCacheCookie&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;HttpResponse response&lt;/span&gt;) &lt;/span&gt;{
            response.SetCookie(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpCookie(CACHE_COOKIE, &lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then set the cookie in every Master page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-csharp&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SevenDigital.Web.Com&lt;/span&gt; {
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExampleMasterPage&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;BaseMasterPage&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt; BrowserCacheIndicator BrowserCacheIndicator = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BrowserCacheIndicator();

        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Page_Load&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; sender, EventArgs e&lt;/span&gt;) &lt;/span&gt;{
            BrowserCacheIndicator.ClearCacheCookie(Response);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;using-the-cookie-to-know-whether-the-page-was-loaded-from-the-browser-cache&quot;&gt;Using the cookie to know whether the page was loaded from the browser cache&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;loadedFromBrowserCache&lt;/code&gt; cookie will be reset set to &lt;code&gt;false&lt;/code&gt; by the HTTP Response header every time the page is loaded from the server. But it will not be reset when the page is loaded from the cache. We can use this to our advantage by setting the &lt;code&gt;loadedFromBrowserCache&lt;/code&gt; cookie to &lt;code&gt;true&lt;/code&gt; in javascript.&lt;/p&gt;
&lt;p&gt;Then we know that the browser was loaded from the cache if the cookie is true on page load (because it was not reset by the server).&lt;/p&gt;
&lt;p&gt;We just need to make sure we check the cookie before we set it to &lt;code&gt;true&lt;/code&gt;!&lt;/p&gt;
&lt;h3 id=&quot;browser-cache-js&quot;&gt;browser-cache.js&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Detect whether or not we are loading this page from the browser cache&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// Set the value $.loadedFromBrowserCache, which other scripts can use&lt;/span&gt;
(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; CACHE_COOKIE = &lt;span class=&quot;string&quot;&gt;'loadedFromBrowserCache'&lt;/span&gt;;
    jQuery.loadedFromBrowserCache = getCookie(CACHE_COOKIE) == &lt;span class=&quot;string&quot;&gt;'true'&lt;/span&gt;;
    setCookie(CACHE_COOKIE, &lt;span class=&quot;string&quot;&gt;'true'&lt;/span&gt;);
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a &lt;code&gt;$.loadedFromBrowserCache&amp;lt;&lt;/code&gt; variable that let’s us know whether the page was loaded from the browser cache.&lt;/p&gt;
&lt;p&gt;Note, the above function can run immediately, it does not need to wait for the &lt;code&gt;jQuery&lt;/code&gt; &lt;code&gt;ready&lt;/code&gt; event, or the &lt;code&gt;window.onload&lt;/code&gt; event as it does not modify the DOM.&lt;/p&gt;
&lt;h2 id=&quot;using-loadedfrombrowsercache-to-do-something-useful&quot;&gt;Using &lt;code&gt;$.loadedFromBrowserCache&lt;/code&gt; to do something useful&lt;/h2&gt;
&lt;p&gt;Now we can do something useful with the knowledge a page was reloaded from the cache. How about reloading the users basket to ensure it is always up to date:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Reload the basket using ajax&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// This is so that users still see the latest basket when using the back&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// button in their browsers&lt;/span&gt;
$(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ($.loadedFromBrowserCache) {
        refreshBasket();
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>QUnitAdapter 1.0.3</title>
      <link>//blog/articles/qunitadapter-1-0-3/</link>
      <pubDate>Tue, 10 Nov 2009 07:32:34 +0000</pubDate>
      <guid isPermaLink="true">//blog/articles/qunitadapter-1-0-3/</guid>
      <author></author>
      <description>&lt;p&gt;Just a small update to the JS Test Driver &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/QUnitAdapter&quot;&gt;QUnitAdapter&lt;/a&gt;. Version 1.0.3 has been released, and fixes a single bug:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://code.google.com/p/js-test-driver/issues/detail?id=64&quot;&gt;Issue 64&lt;/a&gt;: QUnit Adapter fails to run tests if you don’t include a module&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can now declare tests without a module, and they will run under the &lt;code&gt;Default Module&lt;/code&gt;. In previous versions these tests would be silently ignored (whoops!).&lt;/p&gt;
&lt;p&gt;You can always &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/QUnitAdapter&quot;&gt;download the latest version of QUnitAdapter from Google Code&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Loris Autotest for Javascript</title>
      <link>//blog/articles/loris-autotest-for-javascript/</link>
      <pubDate>Fri, 06 Nov 2009 14:26:54 +0000</pubDate>
      <guid isPermaLink="true">//blog/articles/loris-autotest-for-javascript/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve previously written a number of posts on javascript and autotest. Explaining how to integrate javascript lint, unit tests, and growl with the ruby &lt;a href=&quot;http://ph7spot.com/articles/getting_started_with_autotest&quot;&gt;Autotest&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;While this all worked, it felt a little clunky as Autotest doesn’t natively support the idea of running multiple tasks one after the other. Rather than hack at the Autotest codebase, I thought I’d get some ruby experience by rolling my own autotest-style framework. Not great for reuse of code, but a great way for me to learn :)&lt;/p&gt;
&lt;h2 id=&quot;loris&quot;&gt;Loris&lt;/h2&gt;
&lt;p&gt;Loris will monitor your project and run &lt;a href=&quot;http://www.javascriptlint.com/&quot;&gt;Javascript Lint&lt;/a&gt; and &lt;a href=&quot;http://code.google.com/p/js-test-driver/&quot;&gt;JS Test Driver&lt;/a&gt; whenever a file changes, it will report the results to the command line and using &lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt;. If required, Loris will automatically start the JS Test Driver server and register your default browser with it.&lt;/p&gt;
&lt;h3 id=&quot;installing&quot;&gt;Installing&lt;/h3&gt;
&lt;p&gt;Loris is hosted on &lt;a href=&quot;http://gemcutter.org/&quot;&gt;Gemcutter&lt;/a&gt;, so you need to install their gem if you haven’t already.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;sudo gem update --system
sudo gem install gemcutter
gem tumble
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then to install Loris, just run the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;sudo gem install loris
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Loris has no command line options, and no configuration file (at the moment). It looks for configurations files to decide which tasks to run.&lt;/p&gt;
&lt;h3 id=&quot;configuring-javascript-lint&quot;&gt;Configuring Javascript Lint&lt;/h3&gt;
&lt;p&gt;To enable Javascript Lint, create a &lt;code&gt;jsl.conf&lt;/code&gt; file in the folder where you run Loris. This should be a standard Javascript Lint config file. If you need here is an &lt;a href=&quot;http://mike.kruckenberg.com/archives/2009/03/configuration-options-for-javascript-lint.html&quot;&gt;example Javascript Lint config file&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You just need to specify which files Javascipt Lint should process. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-plain&quot;&gt;### Files
# Specify which files to lint
# Use &amp;quot;+recurse&amp;quot; to enable recursion (disabled by default).
# To add a set of files, use &amp;quot;+process FileName&amp;quot;, &amp;quot;+process Folder\Path\*.js&amp;quot;,
# or &amp;quot;+process Folder\Path\*.htm&amp;quot;.
#
+process src/js/*.js
+process tests/js/*.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If no &lt;code&gt;jsl.conf&lt;/code&gt; file is found, the Javascript Lint task is silently skipped.&lt;/p&gt;
&lt;h3 id=&quot;configuring-js-test-driver&quot;&gt;Configuring JS Test Driver&lt;/h3&gt;
&lt;p&gt;To enable JS Test Driver, create a &lt;code&gt;jsTestDriver.conf&lt;/code&gt; file in the folder where you run Loris. This should be a standard &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/ConfigurationFile&quot;&gt;JS Test Driver config file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This should specify which files JS Test Driver should process, and how it connects to the JS Test Driver server. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-yaml&quot;&gt;server: http://localhost:9876

load:
  - tests/qunit/equiv.js
  - tests/qunit/QUnitAdapter.js

  - src/js/*.js
  - tests/js/*.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If no &lt;code&gt;jsTestDriver.conf&lt;/code&gt; file is found, the JS Test Driver task is silently skipped.&lt;/p&gt;
&lt;p&gt;To make it really simple to run JS Test Driver tests, if the server is set to run on &lt;code&gt;localhost&lt;/code&gt;, and Loris doesn’t detect one running, it will automatically start one, and register your default browser with it.&lt;/p&gt;
&lt;p&gt;This makes it a one step process to get automated tests up and running.&lt;/p&gt;
&lt;h3 id=&quot;running&quot;&gt;Running&lt;/h3&gt;
&lt;p&gt;To run, open a command line window, navigate to the root folder of your project, and run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;loris
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Loris will run Javascript Lint, and JS Test Driver tasks (if it finds their configuration files), and will output the results on the command line.&lt;/p&gt;
&lt;h4 id=&quot;example-output&quot;&gt;Example output&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-plain&quot;&gt;Javascript Lint
success
All files are clean

0 error(s), 0 warning(s)
JS Test Driver
success
All tests pass
[PASSED] GreeterTest.testGreet
  [LOG] JsTestDriver Hello World!
[PASSED] GreeterTest.testGoodbye
[PASSED] GreeterTest.testSetName
[PASSED] GreeterTest.testSetNameAndNameParamter
[PASSED] Asserts.test OK true succeeds
[PASSED] Asserts.test Equals succeeds
  [LOG] about to call assertEquals
[PASSED] Asserts.test Same assert succeeds
[PASSED] Lifecycle.test Setup and Teardown are run, and can contain assertions
Total 8 tests (Passed: 8; Fails: 0; Errors: 0) (3.00 ms)
  Firefox 1.9.1.4 MacIntel: Run 8 tests (Passed: 8; Fails: 0; Errors 0) (3.00 ms)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Every time you make a change to a Javascript file, or a configuration file, Loris will automatically re-run Javascript Lint and JS Test Driver. So you can instant feedback on your changes.&lt;/p&gt;
&lt;p&gt;Loris will clear the command line when re-running tasks. So the latest run is always at the top of you command line.&lt;/p&gt;
&lt;p&gt;Loris will also report a summary of each task using &lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt; (if it is installed). This allows you to get quick feedback without needing to refer back to the command line on every change.&lt;/p&gt;
&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;
&lt;p&gt;JS Test Driver is written in Java, so you will need to have Java installed to run it.&lt;/p&gt;
&lt;p&gt;To get Growl notifications, you will need to install either &lt;a href=&quot;http://growl.info/&quot;&gt;Growl for OSX&lt;/a&gt; or &lt;a href=&quot;http://www.growlforwindows.com/&quot;&gt;Growl for Windows&lt;/a&gt;. Growl for Windows requires the &lt;a href=&quot;http://www.microsoft.com/downloads/details.aspx?FamilyID=0856EACB-4362-4B0D-8EDD-AAB15C5E04F5&amp;amp;displaylang=en&quot;&gt;.NET Framework 2.0+&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;caveat&quot;&gt;Caveat&lt;/h3&gt;
&lt;p&gt;Loris is pretty limited at the moment, I just wired up the basics to get it running for a work project.&lt;/p&gt;
&lt;p&gt;It doesn’t have any configuration options at the moment, so you have to follow it’s assumptions for now. I’m happy to add configuration options for any element as required.&lt;/p&gt;
&lt;p&gt;Loris only comes with a few tasks (Javascript Lint, JS Test Driver, JSpec, and RSpec), but I hope to allow it have new tasks added via new gems (kind of similar to Autotest).&lt;/p&gt;
&lt;p&gt;It comes packaged with a version of Javascript Lint, and JS Test Driver, and will use it’s own versions. It only includes the OSX and Windows versions of Javascript Lint.&lt;/p&gt;
&lt;p&gt;If you want to modify the code, just fork the &lt;a href=&quot;http://github.com/karl/loris&quot;&gt;Loris github project&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Screenshots of Failing Cucumber Scenarios</title>
      <link>//blog/articles/screenshots-of-failing-cucumber-scenarios/</link>
      <pubDate>Mon, 14 Sep 2009 13:20:30 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/screenshots-of-failing-cucumber-scenarios/</guid>
      <author></author>
      <description>&lt;p&gt;At 7digital we use &lt;a href=&quot;http://cukes.info/&quot;&gt;Cucumber&lt;/a&gt; and &lt;a href=&quot;http://wtr.rubyforge.org/&quot;&gt;Watir&lt;/a&gt; for running acceptance tests on some of our websites.&lt;/p&gt;
&lt;p&gt;These tests can help greatly in spotting problems with configuration, databases, load balancing, etc that unit testing misses.&lt;/p&gt;
&lt;p&gt;But because the tests exercise the whole system, from the browser all the way through the the database, they can tend be flakier than unit tests. Then can fail one minute and work the next, which can make debugging them a nightmare.&lt;/p&gt;
&lt;p&gt;So, to make the task of spotting the cause of failing acceptance tests easier, how about we set up Cucumber to take a screenshot of the desktop (and therefore browser) any time a scenario fails.&lt;/p&gt;
&lt;h2 id=&quot;install-screenshot-software&quot;&gt;Install Screenshot Software&lt;/h2&gt;
&lt;p&gt;The first thing we need to do is install something that can take screenshots. The simplest solution I found is a tiny little windows app called &lt;a href=&quot;http://90kts.com/blog/2008/capturing-screenshots-in-watir/&quot;&gt;SnapIt&lt;/a&gt;. It takes a single screenshot of the primary screen and saves it to a location of your choice. No more, no less.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://90kts.com/blog/wp-content/uploads/2008/06/snapit.exe&quot;&gt;Download SnapIt&lt;/a&gt; and save it a known location (e.g. &lt;code&gt;C:\Tools\SnapIt.exe&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tell-cucumber-to-take-a-screenshot-when-a-scenario-fails&quot;&gt;Tell Cucumber to Take a Screenshot When a Scenario Fails&lt;/h2&gt;
&lt;p&gt;Now we need to tell Cucumber to take a screenshot. To do so we’ll add a function to the Cucumber &lt;code&gt;World&lt;/code&gt; that will take a screenshot if needed, and run this in the &lt;code&gt;After&lt;/code&gt; scenario hook. To do this modify your &lt;code&gt;features/support/env.rb&lt;/code&gt; file.&lt;/p&gt;
&lt;h4 id=&quot;env-rb&quot;&gt;env.rb&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DefaultWorld&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;# Screenshot directory, relative to this env.rb file&lt;/span&gt;
  &lt;span class=&quot;constant&quot;&gt;DEFAULT_SCREENSHOT_PATH&lt;/span&gt; = &lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.expand_path(&lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.dirname(__FILE_&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;'/../../../output/cucumber/screenshots/'&lt;/span&gt;)

  &lt;span class=&quot;comment&quot;&gt;# Absolute location of SnapIt&lt;/span&gt;
  &lt;span class=&quot;constant&quot;&gt;SNAPIT_PATH&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;'C:\\Tools\\SnapIt.exe'&lt;/span&gt;

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;take_screenshot_if_failed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(scenario)&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (scenario.status != &lt;span class=&quot;symbol&quot;&gt;:passed&lt;/span&gt;)
      scenario_name = scenario.to_sexp[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].gsub /[^\w\-]/, &lt;span class=&quot;string&quot;&gt;' '&lt;/span&gt;
      time = &lt;span class=&quot;constant&quot;&gt;Time&lt;/span&gt;.now.strftime(&lt;span class=&quot;string&quot;&gt;&quot;%Y-%m-%d %H%M&quot;&lt;/span&gt;)
      screenshot_path = &lt;span class=&quot;constant&quot;&gt;DefaultWorld::DEFAULT_SCREENSHOT_PATH&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt; +  time + &lt;span class=&quot;string&quot;&gt;' - '&lt;/span&gt; + scenario_name + &lt;span class=&quot;string&quot;&gt;'.png'&lt;/span&gt;
      cmd = &lt;span class=&quot;constant&quot;&gt;DefaultWorld::SNAPIT_PATH&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;' &quot;'&lt;/span&gt; + screenshot_path + &lt;span class=&quot;string&quot;&gt;'&quot;'&lt;/span&gt;
      &lt;span class=&quot;string&quot;&gt;%x{&lt;span class=&quot;subst&quot;&gt;#{cmd}&lt;/span&gt;}&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;    
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;# [...] Other DefaultWorld code here if needed&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;constant&quot;&gt;World&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;constant&quot;&gt;DefaultWorld&lt;/span&gt;.new
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;constant&quot;&gt;After&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |scenario|
  take_screenshot_if_failed(scenario)

  &lt;span class=&quot;comment&quot;&gt;# [...] Other After hook code here if needed  &lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just modify the constants in the above code to point to the locations of SnapIt and a directory to save the screenshots too.&lt;/p&gt;
&lt;h2 id=&quot;what-the-code-does&quot;&gt;What the Code Does&lt;/h2&gt;
&lt;p&gt;The code will only take a screenshot if the scenario fails to pass.&lt;/p&gt;
&lt;p&gt;It then extracts the name of the scenario, and converts it to a filename friendly string (e.g. &lt;code&gt;Monkey&amp;#39;s should eat &amp;quot;things&amp;quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;Monkey s should eat things&lt;/code&gt;). It then prepends the current date and time, and uses this string as the filename for the screenshot.&lt;/p&gt;
&lt;p&gt;This allows you to easily find screenshots for a specific scenario or time.&lt;/p&gt;
&lt;h2 id=&quot;run-a-failing-test-and-check-out-the-screenshot&quot;&gt;Run a Failing Test and Check Out the Screenshot&lt;/h2&gt;
&lt;p&gt;Now you can run Cucumber as normal, watch a test fail, and you should see a screenshot appear in the directory you specified. And hopefully it will help you work out what went wrong, enjoy!&lt;/p&gt;
&lt;p&gt;If the screenshot fails to appear, it could be because of an error in the ruby code. But Cucumber seems to hide any execptions within the After hook, so you may need to add &lt;code&gt;puts&lt;/code&gt; statements to work out what is going wrong.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Cucumber Tests as First Class Citizens in TeamCity</title>
      <link>//blog/articles/cucumber-tests-as-first-class-citizens-in-teamcity/</link>
      <pubDate>Thu, 03 Sep 2009 12:42:47 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/cucumber-tests-as-first-class-citizens-in-teamcity/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://www.jetbrains.com/teamcity/&quot;&gt;TeamCity&lt;/a&gt; is a great continuous integration server, and has brilliant built in support for running &lt;a href=&quot;http://www.nunit.org/&quot;&gt;NUnit&lt;/a&gt; tests. The web interface updates automatically as each test is run, and gives immediate feedback on which tests have failed without waiting for the entire suite to finish. It also keeps track of tests over multiple builds, showing you exactly when each test first failed, how often they fail etc.&lt;/p&gt;
&lt;p&gt;If like me you are using &lt;a href=&quot;http://cukes.info/&quot;&gt;Cucumber&lt;/a&gt; to run your acceptance tests, wouldn’t it be great to get the same level of TeamCity integration for every Cucumber test. Well now you can, using the &lt;code&gt;TeamCity::Cucumber::Formatter&lt;/code&gt; from the TeamCity 5.0 EAP release.&lt;/p&gt;
&lt;p&gt;JetBrains, the makers of TeamCity, released a &lt;a href=&quot;http://blogs.jetbrains.com/ruby/2009/08/testing-rubymine-with-cucumber/&quot;&gt;blog post demostrating the Cucumber test integration&lt;/a&gt;, but without any details in how to set it up yourself. So I’ll take you through it here.&lt;/p&gt;
&lt;h2 id=&quot;getting-a-copy-of-the-teamcity-cucumber-formatter&quot;&gt;Getting a Copy of the TeamCity Cucumber Formatter&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;http://www.jetbrains.net/confluence/display/TW/TeamCity+EAP&quot;&gt;latest TeamCity EAP&lt;/a&gt; contains the new Cucumber Formatter hidden deep in it’s bowels. Rather than make you wade through it all, I’ve extracted the relevant files and they are available to download here:&lt;/p&gt;
&lt;h4 id=&quot;-download-the-teamcity-cucumber-formatter-teamcitycucumberformatter-zip-&quot;&gt;&lt;a href=&quot;/blog/articles/cucumber-tests-as-first-class-citizens-in-teamcity/TeamCityCucumberFormatter.zip&quot;&gt;Download the TeamCity Cucumber Formatter&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The archive contains the formatter and the TeamCity library files it requires to run. Extract the archive in your project root and it will add the following files:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-plain&quot;&gt;features/
    support/
        jetbrains-teamcity-formatter.rb
lib/
    teamcity/
        [some support and utility files]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to locate these files within the TeamCity EAP yourself, &lt;a href=&quot;http://download.jetbrains.com/teamcity/TeamCity-10307.war&quot;&gt;download the TeamCity 5.0 EAP War&lt;/a&gt; file and extract it. Then from within the war unzip &lt;code&gt;WEB-INF/plugins/rake-runner-plugin.zip&lt;/code&gt;. And from within the rake-runner-plugin look at &lt;code&gt;rake-runner/lib/rb/patch/bdd/teamcity/cucumber/formatter.rb&lt;/code&gt; and all the files in &lt;code&gt;rake-runner/lib/rb/patch/common/teamcity/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The formatter in my download has been tweaked to look in a new location for the teamcity support files, and has been changed to be a single class in a module named &lt;code&gt;JBTeamCityFormatter&lt;/code&gt; (to ease calling it from the command line).&lt;/p&gt;
&lt;p&gt;The relevant changes in the file are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;
&lt;span class=&quot;variable&quot;&gt;$:&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.expand_path(&lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.dirname(__FILE_&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;'/../../lib/'&lt;/span&gt;)
&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'teamcity/runner_common'&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'teamcity/utils/service_message_factory'&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'teamcity/utils/runner_utils'&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'teamcity/utils/url_formatter'&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;JBTeamCityFormatter&lt;/span&gt; &lt;span class=&quot;inheritance&quot;&gt;&amp;lt; &lt;/span&gt;::&lt;span class=&quot;title&quot;&gt;Cucumber::Ast::Visitor&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;setting-up-cucumber-to-use-the-teamcity-formatter&quot;&gt;Setting up Cucumber to use the TeamCity Formatter&lt;/h2&gt;
&lt;p&gt;Once you have the formatter installed you can use it as with any Cucumber formatter by adding it as a command line parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;cucumber features &lt;span class=&quot;operator&quot;&gt;-f&lt;/span&gt; JBTeamCityFormatter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use it with TeamCity, add a profile your &lt;code&gt;cucumber.yml&lt;/code&gt; file that runs all your features using the new formatter:&lt;/p&gt;
&lt;h4 id=&quot;cucumber-yml&quot;&gt;cucumber.yml&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-yaml&quot;&gt;default: features -q
teamcity: features -q --no-c  -f JBTeamCityFormatter
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;running-cucumber-with-teamcity&quot;&gt;Running Cucumber with TeamCity&lt;/h2&gt;
&lt;p&gt;Now when you run Cucumber within TeamCity (using the &lt;code&gt;teamcity&lt;/code&gt; profile) it will report tests in real time, with all the feedback you are used to. Just add a call to the Cucumber executable to your build script (NAnt, MSBuild, Ant, Rake, etc).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/articles/cucumber-tests-as-first-class-citizens-in-teamcity/cucumber-tests-in-teamcity-cropped.png&quot; alt=&quot;Cucumber tests in TeamCity&quot;&gt;&lt;/p&gt;
&lt;p&gt;Enjoy the new found treatment of Cucumber tests as first class citizens in TeamCity!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>QUnit to JSpec Adapter</title>
      <link>//blog/articles/qunit-to-jspec-adapter/</link>
      <pubDate>Thu, 03 Sep 2009 09:07:16 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/qunit-to-jspec-adapter/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/new-qunit-to-js-test-driver-adapter/&quot;&gt;JSpec&lt;/a&gt; is a Javascript BDD framework with a lot of great things going for it: It can run without a browser (great for continuous integration servers), it
has a Ruby style custom syntax which makes tests easier to write and read, and
it uses a BDD style describe/should syntax.&lt;/p&gt;
&lt;p&gt;It’s a very tempting framework to use, but I already have a large collection
of tests using qunit. I don’t want to use two frameworks for one project, and I
don’t want to rewrite 300+ tests, so what to do?&lt;/p&gt;
&lt;p&gt;How about a QUnit to JSpec Adapter, in the vein of my
&lt;a href=&quot;http://github.com/visionmedia/js-mock-timers/tree/master&quot;&gt;QUnit to JS Test Driver Adapter&lt;/a&gt;. Just load the adapter into JSpec as a
normal javascript file, and you can now&lt;code&gt;exec()&lt;/code&gt; qunit test files in JSpec.&lt;/p&gt;
&lt;h2 id=&quot;downloading-the-qunit-to-jspec-adapter&quot;&gt;Downloading the QUnit to JSpec Adapter&lt;/h2&gt;
&lt;p&gt;First up &lt;a href=&quot;/blog/articles/qunit-to-jspec-adapter/QUnitToJSpecAdapter.js&quot;&gt;download the QUnit to JSpec Adapter&lt;/a&gt;, or copy the code below, and
save it somewhere in your project (e.g. a &lt;code&gt;lib&lt;/code&gt; folder).&lt;/p&gt;
&lt;h4 id=&quot;-qunittojspecadapter-js-3-&quot;&gt;&lt;a href=&quot;/blog/articles/qunit-to-jspec-adapter/QUnitToJSpecAdapter.js&quot;&gt;QUnitToJSpecAdapter.js&lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*
QUnitToJSpecAdapter
Version: 1.0.0

Run qunit tests using JSspec

This provides almost the same api as qunit.

Tests must run sychronously, which means no use of stop and start methods.
You can use the JSpec mock timers to deal with timeouts, intervals, etc

The qunit #main DOM element is not included. If you need to do any DOM manipulation
you need to set it up and tear it down in each test.

*/&lt;/span&gt;
(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{

    JSpec.addMatchers({
        be_ok : &lt;span class=&quot;string&quot;&gt;'!!actual'&lt;/span&gt;
    });

    JSpec.context = JSpec.defaultContext;
    JSpec.context.QUnitAdapter = {
        modules: []
    };

    &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt; = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, lifecycle&lt;/span&gt;) &lt;/span&gt;{

        JSpec.context.QUnitAdapter.modules.push({
            name: name,
            tests: [],
            setup:    (lifecycle &amp;amp;&amp;amp; lifecycle.setup)    ? lifecycle.setup    : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{},
            teardown: (lifecycle &amp;amp;&amp;amp; lifecycle.teardown) ? lifecycle.teardown : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{}
        });

        JSpec.describe(name, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{

            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; length = QUnitAdapter.modules[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].tests.length;
            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; i++) {
                it(QUnitAdapter.modules[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].tests[i].name, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
                    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; adapter = {
                        expectedAsserts: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
                        calledAsserts: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,

                        expect: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;count&lt;/span&gt;) &lt;/span&gt;{
                            adapter.expectedAsserts = count;
                        },

                        ok: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;actual, msg&lt;/span&gt;) &lt;/span&gt;{
                            adapter.calledAsserts++;
                            JSpec.expect(actual).to(JSpec.matchers.be_ok);
                        },

                        equals: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b, msg&lt;/span&gt;) &lt;/span&gt;{
                            adapter.calledAsserts++;
                            JSpec.expect(a).to(JSpec.matchers.be, b);
                        },

                        start: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
                            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'start and stop methods are not available when using JSpec.\n'&lt;/span&gt; +
                                &lt;span class=&quot;string&quot;&gt;'Use the JSpec timer to deal with timeouts and intervals:\n'&lt;/span&gt; +
                                &lt;span class=&quot;string&quot;&gt;'http://github.com/visionmedia/jspec/tree/master'&lt;/span&gt;;
                        },

                        stop: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
                            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'start and stop methods are not available when using JSpec.\n'&lt;/span&gt; +
                                &lt;span class=&quot;string&quot;&gt;'Use the JSpec timer to deal with timeouts and intervals:\n'&lt;/span&gt; +
                                &lt;span class=&quot;string&quot;&gt;'http://github.com/visionmedia/jspec/tree/master'&lt;/span&gt;;
                        },

                        same: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b, msg&lt;/span&gt;) &lt;/span&gt;{
                            adapter.calledAsserts++;
                            JSpec.expect(a).to(JSpec.matchers.eql, b);
                        },

                        reset: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
                            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'reset method is not available when using JSpec'&lt;/span&gt;;
                        },

                        isLocal: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
                            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
                        }
                    };

                    &lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'with(adapter) {'&lt;/span&gt; +
                        JSpec.contentsOf(QUnitAdapter.modules[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].setup) +
                        &lt;span class=&quot;string&quot;&gt;'try {'&lt;/span&gt; +
                        JSpec.contentsOf(QUnitAdapter.modules[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].tests[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].testCallback) +
                        &lt;span class=&quot;string&quot;&gt;'} catch(ex) { throw(ex); } finally {'&lt;/span&gt; +
                        JSpec.contentsOf(QUnitAdapter.modules[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].teardown) +
                        &lt;span class=&quot;string&quot;&gt;'} }'&lt;/span&gt;);

                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (adapter.expectedAsserts &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) {
                        JSpec.expect(adapter.calledAsserts).to(JSpec.matchers.equal, adapter.expectedAsserts);
                    }
                });
            }

            after_each(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
                QUnitAdapter.modules[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].tests.shift();
            });

            after(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
                QUnitAdapter.modules.shift();
            });

        });

    };

    test = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, testCallback&lt;/span&gt;) &lt;/span&gt;{
        JSpec.context.QUnitAdapter.modules[JSpec.context.QUnitAdapter.modules.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].tests.push({
            name: name,
            testCallback: testCallback
        });
    };

})();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;having-some-qunit-tests&quot;&gt;Having some QUnit tests&lt;/h2&gt;
&lt;p&gt;First up you need some qunit tests. Having the qunit test files in the &lt;code&gt;spec&lt;/code&gt;
directory helps simplify loading them.&lt;/p&gt;
&lt;p&gt;As an example you can use the following:&lt;/p&gt;
&lt;h4 id=&quot;qunit-tests-js&quot;&gt;qunit-tests.js&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'Examples'&lt;/span&gt;);

test(&lt;span class=&quot;string&quot;&gt;'True is ok'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  expect(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
  ok(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);
});

&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'Examples with lifecycle'&lt;/span&gt;, {
  setup: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    started = &lt;span class=&quot;string&quot;&gt;'yes'&lt;/span&gt;;
  },
  teardown: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    ok(started);
    started = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;
  }
});

test(&lt;span class=&quot;string&quot;&gt;'Test has started'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  expect(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);
  equals(started, &lt;span class=&quot;string&quot;&gt;'yes'&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;configuring-qunit-support&quot;&gt;Configuring QUnit Support&lt;/h2&gt;
&lt;p&gt;Then to enable QUnit tests to be run in JSpec, you must have JSpec load the
adapater as a normal javascript file, and&lt;code&gt;exec()&lt;/code&gt; the QUnit test file as you
would a JSpec spec file.&lt;/p&gt;
&lt;p&gt;For JSpec rhino support your &lt;code&gt;spec.rhino.js&lt;/code&gt; file would look like:&lt;/p&gt;
&lt;h4 id=&quot;spec-rhino-js&quot;&gt;spec.rhino.js&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;load(&lt;span class=&quot;string&quot;&gt;'/Library/Ruby/Gems/1.8/gems/visionmedia-jspec-2.10.0/lib/jspec.js'&lt;/span&gt;)
load(&lt;span class=&quot;string&quot;&gt;'lib/QUnitAdapter.js'&lt;/span&gt;)

JSpec
.exec(&lt;span class=&quot;string&quot;&gt;'spec/qunit-tests.js'&lt;/span&gt;)
.run({ formatter : JSpec.formatters.Terminal })
.report()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how the QUnit test file is exec’d exactly as you would a normal spec
file. You can run specs and Qunit tests along side each other without any
interference.&lt;/p&gt;
&lt;p&gt;And for running the tests within a browser your &lt;code&gt;spec.dom.html&lt;/code&gt; file would look
like:&lt;/p&gt;
&lt;h4 id=&quot;spec-dom-html&quot;&gt;spec.dom.html&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/Library/Ruby/Gems/1.8/gems/visionmedia-jspec-2.2.1/lib/jspec.css&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/Library/Ruby/Gems/1.8/gems/visionmedia-jspec-2.2.1/lib/jspec.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;../lib/QUnitAdapter.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;actionscript&quot;&gt;
            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;runSuites&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
                JSpec
                .exec(&lt;span class=&quot;string&quot;&gt;'qunit-tests.js'&lt;/span&gt;)
                .run()
                .report()
            }
        &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;jspec&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;onLoad&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;runSuites();&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;jspec-top&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;

## JSpec _&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(JSpec.version)&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;_
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;jspec&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;jspec-bottom&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;running-the-tests&quot;&gt;Running the tests&lt;/h2&gt;
&lt;p&gt;To run the tests just launch JSpec as normal. My prefered method is to run the
tests using rhino, to do this navigate to your project root directory in a
terminal window and run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;jspec run --rhino
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you should now see your QUnit tests running in JSpec:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-plain&quot;&gt; Passes: 5 Failures: 0

 Examples
  True is ok..

 Examples with lifecycle
  Test has started...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;
&lt;p&gt;This adapter has many of the same limitations and my
&lt;a href=&quot;/articles/new-qunit-to-js-test-driver-adapter/&quot;&gt;QUnit to JS Test Driver adapter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The tests must run synchronously (which means no use of the qunit &lt;code&gt;stop&lt;/code&gt; and
&lt;code&gt;start&lt;/code&gt; methods).&lt;/p&gt;
&lt;p&gt;If you need to test timeouts, intervals, or other asynchronous sections of code
, you can use the&lt;a href=&quot;http://github.com/visionmedia/js-mock-timers/tree/master&quot;&gt;mock timers that come with JSpec&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;QUnit DOM support is not included. Consider avoiding interacting directly with
the browser within your unit tests. But if you do need to, you’ll need to create
and remove the DOM objects yourself with each test, or the setup and teardown
methods.&lt;/p&gt;
&lt;p&gt;And lastly, tests are broken out of any closures before they run. This means
they lose access to any closure variables. For example, the follow test would
work in QUnit, but not in JSpec. When running in JSpec access to the&lt;code&gt;setup&lt;/code&gt;
variable is lost.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; setup = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// do setup...&lt;/span&gt;
  };

  test(&lt;span class=&quot;string&quot;&gt;'name'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    setup();
  });
})();
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>QUnit Adapter 1.0.2</title>
      <link>//blog/articles/qunit-adapter-1-0-2/</link>
      <pubDate>Sun, 30  Aug 2009 21:14:51 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/qunit-adapter-1-0-2/</guid>
      <author></author>
      <description>&lt;p&gt;A new version of the &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/QUnitAdapter&quot;&gt;JS Test Driver QUnit Adapter&lt;/a&gt; is available. &lt;/p&gt;
&lt;p&gt;Version 1.0.2 fixes a small bug where a module lifecycle object without Setup or Teardown methods would cause a test to error. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'Lifecycle'&lt;/span&gt;, {});

test(&lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    expect(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
    ok(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'tests still run successfully even if Setup and Teardown are undefined'&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Would give the error &lt;code&gt;Lifecycle.test  error (1.00 ms): Result of expression &amp;#39;l.setUp&amp;#39; [undefined] is not a function.&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is now fixed so the test behaves as if no lifecycle was defined.&lt;/p&gt;
&lt;p&gt;You can get the new &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/QUnitAdapter&quot;&gt;1.0.2 verison of the QUnit Adapter from Google Code&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Running JS Test Driver in Team City</title>
      <link>//blog/articles/running-js-test-driver-in-team-city/</link>
      <pubDate>Tue, 25  Aug 2009 15:16:43 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/running-js-test-driver-in-team-city/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/js-test-driver/&quot;&gt;JS Test Driver&lt;/a&gt; is a great new Javascript Testing Framework from the guys at Google. It provides a blisteringly fast, and easily automated way of running your Javascript unit tests. See this &lt;a href=&quot;http://misko.hevery.com/2009/05/22/yet-another-javascript-testing-framework/&quot;&gt;introduction to JS Test Driver by Miško Hevery&lt;/a&gt; for a great overview.&lt;/p&gt;
&lt;p&gt;Getting JS Test Driver up and running on your development workstation is easy enough. But how about on a continuous integration server such as &lt;a href=&quot;http://www.jetbrains.com/teamcity/&quot;&gt;TeamCity&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;It’s easy, just follow the instructions below!&lt;/p&gt;
&lt;h2 id=&quot;install-java-and-the-js-test-driver-jar-on-all-the-build-agents&quot;&gt;Install Java and the JS Test Driver jar on all the build agents&lt;/h2&gt;
&lt;p&gt;JS Test Driver is packaged as a Java jar, and therefore all the TeamCity build agents will need a copy of Java and the JS Test Driver jar in order to run the tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For each Build Agent&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.java.com/en/download/manual.jsp&quot;&gt;Download Java&lt;/a&gt; and install it.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/js-test-driver/downloads/list&quot;&gt;Download the JS Test Driver jar&lt;/a&gt; and save it to &lt;code&gt;c:\TeamCityBuildTools\JSTestDriver\&lt;/code&gt; (or whichever location you wish)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;configure-js-test-driver&quot;&gt;Configure JS Test Driver&lt;/h2&gt;
&lt;p&gt;This guide assumes you already have JS Test Driver and some tests set up on your local machine. If not see this &lt;a href=&quot;http://misko.hevery.com/2009/05/22/yet-another-javascript-testing-framework/&quot;&gt;introduction to JS Test Driver by Miško Hevery&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Just make sure that the JS Test Driver config file is set to connect to the local machine, on port 9876 (on another port of your choice).
E.g.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-yaml&quot;&gt;server: http://localhost:9876

load:
  # list of files to load here...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;configure-your-build-process-to-call-js-test-driver&quot;&gt;Configure your build process to call JS Test Driver&lt;/h2&gt;
&lt;p&gt;Now that we have JS Test Driver installed on our build machines, and configured correctly, let’s call it from our build process. At 7digital we are using MSBuild, so we can create a JSTestDriver Target as so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;Name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;JSTestDriver&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;Text&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;##teamcity[progressMessage 'Running JS Test Driver']&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;Importance&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;high&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;Text&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;-------- Running JS Test Driver --------&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;Importance&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;high&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;PropertyGroup&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;JSTestDriverJar&lt;/span&gt;&amp;gt;&lt;/span&gt;&quot;$(BuildToolsPath)\JSTestDriver\jsTestDriver.jar&quot;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;JSTestDriverJar&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;ConfigFile&lt;/span&gt;&amp;gt;&lt;/span&gt;&quot;$(SolutionFolder)\jsTestDriver.conf&quot;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;ConfigFile&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;IEPath&lt;/span&gt;&amp;gt;&lt;/span&gt;&quot;C:\Program Files\Internet Explorer\iexplore.exe&quot;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;IEPath&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;OutputDir&lt;/span&gt;&amp;gt;&lt;/span&gt;&quot;$(SolutionFolder)\output\JSTestDriver&quot;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;OutputDir&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;PropertyGroup&lt;/span&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Exec&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;Command&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;java -jar $(JSTestDriverJar) --port 9876 --browser $(IEPath) --config $(ConfigFile) --tests all --testOutput $(OutputDir)&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;Target&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The important points here are that you have the properties configured correctly (JSTestDriverJar, ConfigFile, etc) for your individual setup.&lt;/p&gt;
&lt;p&gt;The Exec command will automatically create a JS Test Driver server, launch IE, and run all the tests. The test results will be output to the OutputDir in a JUnit compatible xml format. See the &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/ContinuousBuild&quot;&gt;JS Test Driver continuous integration page&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;Once you have created this Target, ensure it is called by your standard bulid Target by adding it as a dependancy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;Name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;BuildAndUnitTest&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;DependsOnTargets&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Compile;JSLint;JSTestDriver;NUnit&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;have-teamcity-pick-up-the-test-results&quot;&gt;Have TeamCity pick up the test results&lt;/h2&gt;
&lt;p&gt;If you run your build through TeamCity now, you will see that it runs all your Javascript tests using JS Test Driver. But it doesn’t report any results. And test failures don’t stop the build.&lt;/p&gt;
&lt;p&gt;Luckily TeamCity can import the JS Test Driver output xml, because it is JUnit compatible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the build which is running the JS Test Driver tests&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Edit Configuration Settings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click on build step 3 (e.g. &lt;code&gt;Runner: MSBuild&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Under the &lt;code&gt;XML Report Processing&lt;/code&gt; section, choose &lt;code&gt;Ant JUnit&lt;/code&gt; from the &lt;code&gt;Import data&lt;/code&gt; from dropdown&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;Report paths&lt;/code&gt; text area add the relative path the the JS Test Driver output file (e.g. &lt;code&gt;output\JSTestDriver\TEST-com.google.jstestdriver.1.xml&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;save&lt;/code&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now when you run your build again you will see your JS Test Driver tests showing up in the Tests tab, and test failures now stop the build.&lt;/p&gt;
&lt;p&gt;Your Javascript unit tests now sit as first class citizens within TeamCity!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/blog/articles/running-js-test-driver-in-team-city/JSTestDriverFailedTest.png&quot;&gt;&lt;img src=&quot;/blog/articles/running-js-test-driver-in-team-city/JSTestDriverFailedTest.png&quot; alt=&quot;JSTestDriverFailedTest&quot; title=&quot;JSTestDriverFailedTest&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>New version of Autotest Growl (with Window support)</title>
      <link>//blog/articles/new-version-of-autotest-growl-with-window-support/</link>
      <pubDate>Fri, 24 Jul 2009 10:16:35 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/new-version-of-autotest-growl-with-window-support/</guid>
      <author></author>
      <description>&lt;p&gt;In a previous post I detailed changes I made to &lt;a href=&quot;/articles/autotest-growl-for-windows/&quot;&gt;add Growl for Windows support to Autotest Growl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These changes have now been integrated back into the &lt;code&gt;autotest-growl&lt;/code&gt; gem. Along with some major improvements to the analysis of test results, and the details in the notifications. Thanks to &lt;a href=&quot;http://github.com/svoop&quot;&gt;Svoop&lt;/a&gt;, the creator of &lt;code&gt;autotest-growl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This gem isn’t yet available on &lt;a href=&quot;http://rubyforge.org/&quot;&gt;Rubyforge&lt;/a&gt;, but you can grab a copy from my fork on GitHub until it is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;gem install karl-autotest-growl --source http://gems.github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should be a drop in replacement for the previous version of &lt;code&gt;karl-autotest-growl&lt;/code&gt;, the only thing you should notice more detail from the growl notifications!&lt;/p&gt;
&lt;p&gt;I’ll post again once the official gem is available on &lt;a href=&quot;http://rubyforge.org/&quot;&gt;Rubyforge&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Ruby Growl Notifications in Windows</title>
      <link>//blog/articles/ruby-growl-notifications-in-windows/</link>
      <pubDate>Fri, 17 Jul 2009 15:24:57 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/ruby-growl-notifications-in-windows/</guid>
      <author></author>
      <description>&lt;p&gt;I previously posted an update that enables &lt;a href=&quot;/articles/autotest-growl-for-windows/&quot;&gt;Growl notifications for Autotest in Windows&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Which is nice, but what about other Ruby programs, they might want to send Growl notifications too. To this end Vision Media have produced a &lt;a href=&quot;http://github.com/visionmedia/growl/tree/master&quot;&gt;Ruby Growl gem&lt;/a&gt; which makes it easy for any Ruby program to send Growl notifications.&lt;/p&gt;
&lt;p&gt;But the visionmedia-growl gem only works on OSX.&lt;/p&gt;
&lt;h2 id=&quot;now-with-added-windows-support&quot;&gt;Now With Added Windows Support&lt;/h2&gt;
&lt;p&gt;So I had a go at adding Windows support. The short version is that it works, but the code is seriously ugly and not well tested (you have been warned!).&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;http://github.com/karl/growl/tree/master&quot;&gt;my visionmedia-growl fork&lt;/a&gt;. Or just install the gem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;sudo gem install karl-growl --source http://gems.github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;packaging-growlnotify-&quot;&gt;Packaging &lt;code&gt;growlnotify&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;First up I decided to package both the OSX and Windows versions of &lt;code&gt;growlnotify&lt;/code&gt; with the gem.&lt;/p&gt;
&lt;p&gt;This is a departure from the existing gem, which requires that you have installed &lt;code&gt;growlnotify&lt;/code&gt; yourself. I wanted to be able to include this gem in new projects without having to bother users to download extra dependencies.&lt;/p&gt;
&lt;h2 id=&quot;choose-the-right-growlnotify-&quot;&gt;Choose the Right &lt;code&gt;growlnotify&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I decide which growlnotify to use by checking which platform we are running on:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;is_windows?&lt;/span&gt;&lt;/span&gt;
    processor, platform, *rest = &lt;span class=&quot;constant&quot;&gt;RUBY_PLATFORM&lt;/span&gt;.split(&lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt;)
    platform == &lt;span class=&quot;string&quot;&gt;'mswin32'&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;##&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;# Execute +args+ against the binary.&lt;/span&gt;

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;args&lt;/span&gt;&lt;/span&gt;
    bin = &lt;span class=&quot;constant&quot;&gt;PACKAGED_BIN&lt;/span&gt;
    bin += &lt;span class=&quot;string&quot;&gt;'.com'&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; is_windows?

    &lt;span class=&quot;constant&quot;&gt;Kernel&lt;/span&gt;.system bin, *args
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;different-switches-on-different-operating-systems&quot;&gt;Different Switches on Different Operating Systems&lt;/h2&gt;
&lt;p&gt;The biggest headache with adding Windows support was adding the ability to generate Windows style command line arguments.&lt;/p&gt;
&lt;p&gt;Example OSX command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;growlnotify --message llamas --title Llama! --image images/llama.png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example Windows command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;growlnotify.com llamas /t:Llama! /i:images/llama.png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that in the Windows command line, switches are specified with &lt;code&gt;/_x_:&lt;/code&gt; prefix, and no space. The names of the switches don’t correspont exactly with the OSX ones.&lt;/p&gt;
&lt;p&gt;Also, with the Windows version of &lt;code&gt;growlnotify&lt;/code&gt; you don’t give an switch for the message body, just include it as the first argument.&lt;/p&gt;
&lt;h2 id=&quot;adding-support-for-windows-style-switches&quot;&gt;Adding Support for Windows Style Switches&lt;/h2&gt;
&lt;p&gt;The first part of adding this support was to map the OSX switches to their Windows counterparts (where they existed).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;    switch &lt;span class=&quot;symbol&quot;&gt;:title&lt;/span&gt;,      &lt;span class=&quot;symbol&quot;&gt;:t&lt;/span&gt;
    switch &lt;span class=&quot;symbol&quot;&gt;:sticky&lt;/span&gt;,     &lt;span class=&quot;symbol&quot;&gt;:s&lt;/span&gt;
    switch &lt;span class=&quot;symbol&quot;&gt;:priority&lt;/span&gt;,   &lt;span class=&quot;symbol&quot;&gt;:p&lt;/span&gt;
    switch &lt;span class=&quot;symbol&quot;&gt;:host&lt;/span&gt;,       &lt;span class=&quot;symbol&quot;&gt;:host&lt;/span&gt;
    switch &lt;span class=&quot;symbol&quot;&gt;:password&lt;/span&gt;,   &lt;span class=&quot;symbol&quot;&gt;:pass&lt;/span&gt;
    switch &lt;span class=&quot;symbol&quot;&gt;:port&lt;/span&gt;,       &lt;span class=&quot;symbol&quot;&gt;:port&lt;/span&gt;

    switch &lt;span class=&quot;symbol&quot;&gt;:name&lt;/span&gt;,       &lt;span class=&quot;symbol&quot;&gt;:a&lt;/span&gt;
    switch &lt;span class=&quot;symbol&quot;&gt;:message&lt;/span&gt;,    &lt;span class=&quot;symbol&quot;&gt;:EMPTY&lt;/span&gt;
    switch &lt;span class=&quot;symbol&quot;&gt;:image&lt;/span&gt;,      &lt;span class=&quot;symbol&quot;&gt;:i&lt;/span&gt;
    switch &lt;span class=&quot;symbol&quot;&gt;:identifier&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:id&lt;/span&gt;

    switch &lt;span class=&quot;symbol&quot;&gt;:iconpath&lt;/span&gt;,   &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;
    switch &lt;span class=&quot;symbol&quot;&gt;:appIcon&lt;/span&gt;,    &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;
    switch &lt;span class=&quot;symbol&quot;&gt;:icon&lt;/span&gt;,       &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;

    switch &lt;span class=&quot;symbol&quot;&gt;:udp&lt;/span&gt;,        &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;
    switch &lt;span class=&quot;symbol&quot;&gt;:auth&lt;/span&gt;,       &lt;span class=&quot;symbol&quot;&gt;:hash&lt;/span&gt;
    switch &lt;span class=&quot;symbol&quot;&gt;:crypt&lt;/span&gt;,      &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, not all OSX switches are available in the Windows version of &lt;code&gt;growlnotify&lt;/code&gt;. I dealt with this at the moment, by just stripping out any switches that won’t work in Windows.&lt;/p&gt;
&lt;p&gt;Finally I altered (hacked?) the Growl &lt;code&gt;run&lt;/code&gt; method, to produce parameter strings for either OSX or Windows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt;
      raise &lt;span class=&quot;constant&quot;&gt;Error&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'message required'&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unless&lt;/span&gt; message
      &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;.switches.each &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |name, win_name|
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; send(&lt;span class=&quot;symbol&quot;&gt;:&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#{name}&lt;/span&gt;?&quot;&lt;/span&gt;&lt;/span&gt;)
          value = send(name).to_s &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; send(name) &amp;amp;&amp;amp; !(&lt;span class=&quot;constant&quot;&gt;TrueClass&lt;/span&gt; === send(name))
          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; is_windows?
            &lt;span class=&quot;keyword&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; win_name.&lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;?

            switch = (win_name == &lt;span class=&quot;symbol&quot;&gt;:EMPTY&lt;/span&gt;) ? &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/&lt;span class=&quot;subst&quot;&gt;#{win_name}&lt;/span&gt;:&quot;&lt;/span&gt;
            args &amp;lt;&amp;lt; switch + value
          &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
            args &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;--&lt;span class=&quot;subst&quot;&gt;#{name}&lt;/span&gt;&quot;&lt;/span&gt;
            args &amp;lt;&amp;lt; value
          &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;constant&quot;&gt;Growl&lt;/span&gt;.exec *args
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main points of interest here are the The windows switches don’t have any space between the switch name and the value. So instead they are concatenated together into a single string.&lt;/p&gt;
&lt;p&gt;Finally we deal with the special case where using the Windows version of &lt;code&gt;growlnotify&lt;/code&gt; we need to add the message parameter without a switch, so we use the special token &lt;code&gt;:EMPTY&lt;/code&gt; to deal with this.&lt;/p&gt;
&lt;h2 id=&quot;the-result&quot;&gt;The Result&lt;/h2&gt;
&lt;p&gt;The results of this is a &lt;a href=&quot;http://github.com/karl/growl/tree/master&quot;&gt;Ruby gem that supports Growl notifications in Windows&lt;/a&gt;. The gem can be installed with the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;sudo gem install karl-growl --source http://gems.github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And used in your Ruby program as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;&lt;span class=&quot;constant&quot;&gt;Growl&lt;/span&gt;.notify {
    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.message = &lt;span class=&quot;string&quot;&gt;'Hello World'&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.image = &lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.join &lt;span class=&quot;string&quot;&gt;'path'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'to'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'image.png'&lt;/span&gt;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more usage examples see the &lt;a href=&quot;http://github.com/karl/growl/tree/master&quot;&gt;karl-growl site&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;known-issues&quot;&gt;Known Issues&lt;/h2&gt;
&lt;p&gt;There are a few known issues. The biggest of which no support for normalised icons.&lt;/p&gt;
&lt;p&gt;To support OSX and Windows always give a path to an image, e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;:image&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;'path/to/image.png'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a number of switches that only work in OSX, and are ignored in Windows. Unsupported switches are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;:iconpath&lt;/span&gt;
  &lt;span class=&quot;symbol&quot;&gt;:appIcon&lt;/span&gt;
  &lt;span class=&quot;symbol&quot;&gt;:icon&lt;/span&gt;
  &lt;span class=&quot;symbol&quot;&gt;:udp&lt;/span&gt;
  &lt;span class=&quot;symbol&quot;&gt;:crypt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The gem has only received the most cursory of testing, so there may be a whole host of other issues, be warned!&lt;/p&gt;
&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;
&lt;p&gt;I’m treating the current version of this gem, as a design spike, a proof of concept that shows we can have cross Operating System support. The code is a real mess, and has no unit tests, but I’m releasing it here to follow the &lt;a href=&quot;http://anarchycreek.com/2009/07/11/better-now-beats-best-later/&quot;&gt;‘better now beats best later’&lt;/a&gt; rule.&lt;/p&gt;
&lt;p&gt;I hope to refactor the code into something more production worthy when I get a chance.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Autotest Growl for Windows</title>
      <link>//blog/articles/autotest-growl-for-windows/</link>
      <pubDate>Fri, 10 Jul 2009 11:32:48 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/autotest-growl-for-windows/</guid>
      <author></author>
      <description>&lt;p&gt;In a previous blog post I detailed &lt;a href=&quot;/articles/autotest-growl-notifications-on-windows-using-snarl/&quot;&gt;how to get Autotest Growl notifications on Windows using Snarl&lt;/a&gt;. But, there now exists an &lt;a href=&quot;http://www.growlforwindows.com/gfw/&quot;&gt;official Growl client for Windows&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So how about we update &lt;code&gt;autotest-growl&lt;/code&gt; to support Windows (on top of it’s existing support for OSX).&lt;/p&gt;
&lt;p&gt;If you don’t want to know all the gory details, you can just install my fork of the &lt;code&gt;autotest-growl&lt;/code&gt; gem, that includes native Growl Windows support:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;gem install karl-autotest-growl --source http://gems.github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, you’ll need to have &lt;a href=&quot;http://www.growlforwindows.com/gfw/&quot;&gt;Growl for Windows&lt;/a&gt; installed as well!&lt;/p&gt;
&lt;h2 id=&quot;updating-autotest-growl-to-support-windows&quot;&gt;Updating Autotest Growl to support Windows&lt;/h2&gt;
&lt;p&gt;First up &lt;a href=&quot;http://www.growlforwindows.com/gfw/&quot;&gt;download and install Growl for Windows&lt;/a&gt; (if you haven’t already).&lt;/p&gt;
&lt;p&gt;Updating Autotest Growl turns out to be pretty simple. We need to download &lt;a href=&quot;http://www.growlforwindows.com/gfw/help/growlnotify.aspx&quot;&gt;growlnotify for Windows&lt;/a&gt;, and add it to the &lt;code&gt;growl/&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Then we can update the &lt;code&gt;autotest-growl&lt;/code&gt; code to decide which &lt;code&gt;growlnotify&lt;/code&gt; to use depending on the Operating System.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;is_windows?&lt;/span&gt;&lt;/span&gt;
    processor, platform, *rest = &lt;span class=&quot;constant&quot;&gt;RUBY_PLATFORM&lt;/span&gt;.split(&lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt;)
    platform == &lt;span class=&quot;string&quot;&gt;'mswin32'&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;##&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;# Display a message through Growl.&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;growl&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;message&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;icon&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;priority=&lt;/span&gt;0, &lt;span class=&quot;title&quot;&gt;stick=&lt;/span&gt;&quot;&quot;&lt;/span&gt;
    growl = &lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.join(&lt;span class=&quot;constant&quot;&gt;GEM_PATH&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'growl'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'growlnotify'&lt;/span&gt;)
    image = &lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.join(&lt;span class=&quot;constant&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;'HOME'&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;'.autotest-growl'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#{icon}&lt;/span&gt;.png&quot;&lt;/span&gt;)
    image = &lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.join(&lt;span class=&quot;constant&quot;&gt;GEM_PATH&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'img'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#{icon}&lt;/span&gt;.png&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.exists?(image)

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; is_windows?
      growl += &lt;span class=&quot;string&quot;&gt;'.com'&lt;/span&gt;
      cmd = &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#{growl}&lt;/span&gt; &lt;span class=&quot;subst&quot;&gt;#{message.inspect}&lt;/span&gt; /a:\&quot;autotest\&quot; /r:\&quot;Autotest\&quot; /n:\&quot;Autotest\&quot; /i:\&quot;&lt;span class=&quot;subst&quot;&gt;#{image}&lt;/span&gt;\&quot; /p:&lt;span class=&quot;subst&quot;&gt;#{priority}&lt;/span&gt; /t:\&quot;&lt;span class=&quot;subst&quot;&gt;#{title}&lt;/span&gt;\&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;@@remote_notification&lt;/span&gt;
        cmd = &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#{growl}&lt;/span&gt; -H localhost -n autotest --image '&lt;span class=&quot;subst&quot;&gt;#{image}&lt;/span&gt;' -p &lt;span class=&quot;subst&quot;&gt;#{priority}&lt;/span&gt; -m &lt;span class=&quot;subst&quot;&gt;#{message.inspect}&lt;/span&gt; '&lt;span class=&quot;subst&quot;&gt;#{title}&lt;/span&gt;' &lt;span class=&quot;subst&quot;&gt;#{stick}&lt;/span&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
        cmd = &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#{growl}&lt;/span&gt; -n autotest --image '&lt;span class=&quot;subst&quot;&gt;#{image}&lt;/span&gt;' -p &lt;span class=&quot;subst&quot;&gt;#{priority}&lt;/span&gt; -m &lt;span class=&quot;subst&quot;&gt;#{message.inspect}&lt;/span&gt; '&lt;span class=&quot;subst&quot;&gt;#{title}&lt;/span&gt;' &lt;span class=&quot;subst&quot;&gt;#{stick}&lt;/span&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

  system cmd
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll notice that the command line flags are slightly different for the Windows version of &lt;code&gt;growlnotify&lt;/code&gt;, the using the &lt;code&gt;/x:&lt;/code&gt; format, rather than the OSX &lt;code&gt;-x&lt;/code&gt; format.&lt;/p&gt;
&lt;p&gt;The Windows version also adds the flat &lt;code&gt;/r:&amp;quot;Autotest&amp;quot;&lt;/code&gt; to ensure the Autotest application is registered the first time it is run.&lt;/p&gt;
&lt;p&gt;There is no need to deal with the &lt;code&gt;@@remote_notification&lt;/code&gt; settings, as Growl for Windows does not have the same problem with &lt;a href=&quot;https://bugs.launchpad.net/growl/+bug/267767&quot;&gt;intermittent notification loss&lt;/a&gt; that OSX does.&lt;/p&gt;
&lt;h2 id=&quot;installing-updated-autotest-growl-gem&quot;&gt;Installing updated Autotest Growl gem&lt;/h2&gt;
&lt;p&gt;I have rolled all these changes into my fork of &lt;code&gt;autotest-growl&lt;/code&gt;. To switch over to this fork, open a Windows command prompt and enter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;gem uninstall autotest-growl
gem install karl-autotest-growl --source http://gems.github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then watch the notifications roll in!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Update to QUnit Adapter</title>
      <link>//blog/articles/update-to-qunit-adapter/</link>
      <pubDate>Thu, 02 Jul 2009 07:32:25 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/update-to-qunit-adapter/</guid>
      <author></author>
      <description>&lt;p&gt;I’ve made a small update to the &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/QUnitAdapter&quot;&gt;QUnit Adapter for JS Test Driver&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This fixes a bug where the &lt;code&gt;ok()&lt;/code&gt; assertion was much stricter than the qunit equivalent. It was only succeeding when passed a boolean &lt;code&gt;true&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;Now it behaves the same as the qunit version, and succeeds with all values other than &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can get the new &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/QUnitAdapter&quot;&gt;1.0.1 verison of the QUnit Adapter from Google Code&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>jsUnit Mock Timeouts and JS Test Driver</title>
      <link>//blog/articles/jsunit-mock-timeouts-and-js-test-driver/</link>
      <pubDate>Wed, 01 Jul 2009 17:45:30 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/jsunit-mock-timeouts-and-js-test-driver/</guid>
      <author></author>
      <description>&lt;p&gt;As part of my experimenting with &lt;a href=&quot;http://code.google.com/p/js-test-driver/&quot;&gt;JS Test Driver&lt;/a&gt;, I have been porting over a suite of about 300 existing tests.&lt;/p&gt;
&lt;p&gt;Some of these tests deal with time based logic, such as delayed callbacks or time limited user interaction. Currently these tests are run in a HTML page using &lt;a href=&quot;http://docs.jquery.com/QUnit&quot;&gt;qunit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To deal with the time based logic I use the jsUnit’s Mock Timeout. See &lt;a href=&quot;http://googletesting.blogspot.com/2007/03/javascript-simulating-time-in-jsunit.html&quot;&gt;Simulating Time in jsUnit Tests on the Google Testing Blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;jsUnit’s Mock Timeout overrides the built in &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;clearTimeout&lt;/code&gt;, &lt;code&gt;setInterval&lt;/code&gt;, and &lt;code&gt;clearInterval&lt;/code&gt; methods, and provides a &lt;code&gt;Clock&lt;/code&gt; object that allows you to control the passage of time.&lt;/p&gt;
&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;This works fine in qunit, but it fails catastrophically in JS Test Driver. This is because JS Test Driver uses the &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; methods to control it’s own behaviour. Once these have been overridden with the mock versions JS Test Driver no longer works.&lt;/p&gt;
&lt;p&gt;As a temporary fix for this I have created a patched version of JS Test Driver, which creates it’s own copies of the original &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;clearTimeout&lt;/code&gt;, &lt;code&gt;setInterval&lt;/code&gt;, and &lt;code&gt;clearInterval&lt;/code&gt; methods, before loading any code. This ensures it works well with the jsUnit Mock Timeout.&lt;/p&gt;
&lt;h2 id=&quot;patched-js-test-driver&quot;&gt;Patched JS Test Driver&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/blog/articles/jsunit-mock-timeouts-and-js-test-driver/JsTestDriver-1.0b-own-timeouts.jar&quot;&gt;Download a patched JsTestDriver with no-confilict timeouts.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just use this jar in place of the original &lt;code&gt;JsTestDriver-1.0b.jar&lt;/code&gt;, and you can include &lt;code&gt;jsUnitMockTimeout.js&lt;/code&gt; in your tests without breaking JS Test Driver!&lt;/p&gt;
&lt;p&gt;You may also want to &lt;a href=&quot;/blog/articles/jsunit-mock-timeouts-and-js-test-driver/jsUnitMockTimeout.js&quot;&gt;download jsUnitMockTimeout.js&lt;/a&gt; (to save you finding it within the jsUnit source).&lt;/p&gt;
&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;
&lt;p&gt;I see this patched JS Test Driver as very much a temporary stepping stone, while the correct solution is worked out. Beware of relying on it too heavily!&lt;/p&gt;
&lt;div class=&quot;info&quot; markdown=&quot;1&quot;&gt;
&lt;strong&gt;Update&lt;/strong&gt;: &lt;a href=&quot;http://groups.google.com/group/js-test-driver/browse_thread/thread/1393946af440ed90/c532267cd6c90710#c532267cd6c90710&quot;&gt;This solution has been integrated into JS Test Driver&lt;/a&gt;, and will be available in the next release.
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>QUnitAdapter now part of JS Test Driver</title>
      <link>//blog/articles/qunitadapter-now-part-of-js-test-driver/</link>
      <pubDate>Wed, 01 Jul 2009 08:54:25 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/qunitadapter-now-part-of-js-test-driver/</guid>
      <author></author>
      <description>&lt;p&gt;In my last post I &lt;a href=&quot;/articles/new-qunit-to-js-test-driver-adapter/&quot;&gt;introduced a QUnit to JS Test Driver adapter&lt;/a&gt;, a small adapter which converts QUnit tests into native JS Test Driver tests.&lt;/p&gt;
&lt;p&gt;This adapter is now part of the JS Test Driver project.&lt;/p&gt;
&lt;p&gt;There is now a &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/QUnitAdapter&quot;&gt;QUnit Adapter wiki page&lt;/a&gt; on the JS Test Driver project site. This will be updated to keep up with any changes to the adapter.&lt;/p&gt;
&lt;p&gt;The code is now stored within the JS Test Driver subversion repository. You can always &lt;a href=&quot;http://code.google.com/p/js-test-driver/source/browse/#svn/trunk/JsTestDriver/contrib/qunit&quot;&gt;download the latest version of the QUnit Adapter&lt;/a&gt; using the Google Code web interface.&lt;/p&gt;
&lt;p&gt;Thanks to Jeremie Lenfant-engelmann for deeming QUnit Adapter worthy of official regonition :)&lt;/p&gt;
</description>
    </item>
    <item>
      <title>New QUnit to JS Test Driver adapter</title>
      <link>//blog/articles/new-qunit-to-js-test-driver-adapter/</link>
      <pubDate>Tue, 23 Jun 2009 08:56:28 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/new-qunit-to-js-test-driver-adapter/</guid>
      <author></author>
      <description>&lt;div class=&quot;info&quot;&gt;The code in this post is out of date. The latest code can always be found in the &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/QUnitAdapter&quot;&gt;JS Test Driver google code site&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;In my &lt;a href=&quot;/articles/qunit-and-js-test-driver/&quot;&gt;previous post on QUnit and JS Test Driver&lt;/a&gt; I showed how to run your &lt;a href=&quot;http://docs.jquery.com/QUnit&quot;&gt;qunit&lt;/a&gt; tests with &lt;a href=&quot;http://code.google.com/p/js-test-driver/&quot;&gt;JS Test Driver&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The technique used was to run the tests with qunit, and report either their success or failure to JS Test Driver. This works, but you miss out on the important feedback of exactly which assertions have failed, and why.&lt;/p&gt;
&lt;p&gt;This problem has led me to taking a new approach to running qunit tests with JS Test Driver, where I don’t use any of the existing qunit code, and instead just create an interface wrapper that converts qunit style tests and assertions directly into JS Test Driver tests and assertions.&lt;/p&gt;
&lt;p&gt;This gives assertion level error reporting, making it much easier to write and debug tests. Essentially this adapter allows you to write native JS Test Driver tests, but using the less verbose qunit syntax.&lt;/p&gt;
&lt;p&gt;The new approach also means that qunit lifecycles (setup and teardown) work.&lt;/p&gt;
&lt;h2 id=&quot;installing-the-qunit-adapter&quot;&gt;Installing the QUnit Adapter&lt;/h2&gt;
&lt;p&gt;First up download the &lt;a href=&quot;/blog/articles/new-qunit-to-js-test-driver-adapter/equiv.js&quot;&gt;equiv.js&lt;/a&gt; file, which is required for the qunit &lt;code&gt;same&lt;/code&gt; assertion.&lt;/p&gt;
&lt;p&gt;Then download the &lt;a href=&quot;/blog/articles/new-qunit-to-js-test-driver-adapter/QUnitAdapter.js&quot;&gt;QUnitAdapter.js&lt;/a&gt; file (or copy the code below).&lt;/p&gt;
&lt;h4 id=&quot;-qunitadapter-js-qunitadapter-js-&quot;&gt;&lt;a href=&quot;/blog/articles/new-qunit-to-js-test-driver-adapter/QUnitAdapter.js&quot;&gt;QUnitAdapter.js&lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{

    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.module = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, lifecycle&lt;/span&gt;) &lt;/span&gt;{
        QUnitTestCase = TestCase(name);

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (lifecycle) {
            QUnitTestCase.prototype.setUp = lifecycle.setup;
            QUnitTestCase.prototype.tearDown = lifecycle.teardown;
        }
    };

    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.test = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, test&lt;/span&gt;) &lt;/span&gt;{
        QUnitTestCase.prototype[&lt;span class=&quot;string&quot;&gt;'test '&lt;/span&gt; + name] = test;
    };

    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.expect = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;count&lt;/span&gt;) &lt;/span&gt;{
        expectAsserts(count);
    };

    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.ok = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;actual, msg&lt;/span&gt;) &lt;/span&gt;{
        assertTrue(msg ? msg : &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;, actual);
    };

    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.equals = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b, msg&lt;/span&gt;) &lt;/span&gt;{
        assertEquals(msg ? msg : &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;, b, a);
    };

    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.start = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.stop = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
        fail(&lt;span class=&quot;string&quot;&gt;'start and stop methods are not available when using JS Test Driver.\n'&lt;/span&gt; +
            &lt;span class=&quot;string&quot;&gt;'Use jsUnit Clock object to deal with timeouts and intervals:\n'&lt;/span&gt; +
            &lt;span class=&quot;string&quot;&gt;'http://googletesting.blogspot.com/2007/03/javascript-simulating-time-in-jsunit.html.'&lt;/span&gt;);
    };

    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.same = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b, msg&lt;/span&gt;) &lt;/span&gt;{
        assertTrue(msg ? msg : &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.equiv(b, a));
    };

    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.reset = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
        fail(&lt;span class=&quot;string&quot;&gt;'reset method is not available when using JS Test Driver'&lt;/span&gt;);
    };

    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.isLocal = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
    };

    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.QUnit = {
        equiv: &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.equiv,
        ok: &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.ok
    };

})();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save both these files to your project (for example &lt;code&gt;tests/qunit/&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;configuring-js-test-driver&quot;&gt;Configuring JS Test Driver&lt;/h2&gt;
&lt;p&gt;To run your qunit tests in JS Test Driver you need to configure it to load the adapter before your qunit tests.&lt;/p&gt;
&lt;p&gt;Update your &lt;code&gt;jsTestDriver.conf&lt;/code&gt; to load the files:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-yaml&quot;&gt;server: http://localhost:9876

load:
  # Add these lines to load the equiv function and adapter in order, before the tests
  # (assuming they are saved to tests/qunit/)
  - tests/qunit/equiv.js
  - tests/qunit/QUnitAdapter.js

  # This is where we load the qunit tests
  - tests/js/*.js

  # And this loads the source files we are testing
  - src/js/*.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;running-js-test-driver-with-qunit-tests&quot;&gt;Running JS Test Driver with qunit tests&lt;/h2&gt;
&lt;p&gt;Now we can run JS Test Driver and watch as it runs all our qunit tests!&lt;/p&gt;
&lt;p&gt;The tests will run as individual JS Test Driver tests, with the format &lt;code&gt;_Module Name_._Test Name_&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-plain&quot;&gt;[PASSED] Module 1.test Test 1
[PASSED] Module 1.test Test 2
[PASSED] Module 2.test Test 1
Total 3 tests (Passed: 3; Fails: 0; Errors: 0) (1.00 ms)
  Safari 530.18: Run 3 tests (Passed: 3; Fails: 0; Errors 0) (1.00 ms)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;
&lt;p&gt;There are a few limitations on which qunit tests will successfully be converted.&lt;/p&gt;
&lt;p&gt;The tests must run synchronously (which means no use of the qunit &lt;code&gt;stop&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt; methods).&lt;/p&gt;
&lt;p&gt;If you need to test timeouts, intervals, or other asynchronous sections of  code, consider &lt;a href=&quot;http://googletesting.blogspot.com/2007/03/javascript-simulating-time-in-jsunit.html&quot;&gt;using the jsUnit Clock object to deal with timeouts and intervals.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;QUnit &lt;code&gt;DOM&lt;/code&gt; support is not included. Consider avoiding interacting directly with the browser within your unit tests. But if you do need to, you’ll need to create and remove the DOM objects yourself with each test, or the &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; methods.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>QUnit and JS Test Driver</title>
      <link>//blog/articles/qunit-and-js-test-driver/</link>
      <pubDate>Sun, 21 Jun 2009 18:18:04 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/qunit-and-js-test-driver/</guid>
      <author></author>
      <description>&lt;div class=&quot;info&quot;&gt;This post has obsoleted been the &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/QUnitAdapter&quot;&gt;new QUnit Adapter&lt;/a&gt; I created, check it out!&lt;/div&gt;

&lt;p&gt;I was very impressed by the new Google &lt;a href=&quot;http://code.google.com/p/js-test-driver/&quot;&gt;JS Test Driver&lt;/a&gt; project, which provides a blisteringly fast, and easily automated way of running your Javascript unit tests. See this &lt;a href=&quot;http://misko.hevery.com/2009/05/22/yet-another-javascript-testing-framework/&quot;&gt;introduction to JS Test Driver by Miško Hevery&lt;/a&gt; for a great overview.&lt;/p&gt;
&lt;p&gt;I previously described how to &lt;a href=&quot;/articles/autotest-and-js-test-driver/&quot;&gt;run JS Test Driver automatically with Autotest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But I have an existing project that uses the jQuery testing framework &lt;a href=&quot;http://docs.jquery.com/QUnit&quot;&gt;qunit&lt;/a&gt; for testing. I didn’t really fancy rewriting 300+ tests just so I could use the JS Test Driver framework.&lt;/p&gt;
&lt;p&gt;So I wrote a converter that automatically converts qunit modules and tests into JS Test Driver TestCases and test methods.&lt;/p&gt;
&lt;h2 id=&quot;download-converter-and-patched-testrunner&quot;&gt;Download Converter and Patched Testrunner&lt;/h2&gt;
&lt;p&gt;In order to convert from qunit tests I’ve had to add a few extra hooks into the qunit &lt;code&gt;testrunner.js&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Either &lt;a href=&quot;/blog/articles/qunit-and-js-test-driver/testrunner.js&quot;&gt;download the patched testrunner.js&lt;/a&gt; file, or just add the 3 lines below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;    QUnit: {
        &lt;span class=&quot;comment&quot;&gt;// Add the following 3 lines&lt;/span&gt;
        runTest: runTest,
        config: config,
        validTest: validTest,

        &lt;span class=&quot;comment&quot;&gt;// This is existing code&lt;/span&gt;
        equiv: equiv,
        ok: ok,
        done: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;failures, total&lt;/span&gt;)&lt;/span&gt;{},
        log: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result, message&lt;/span&gt;)&lt;/span&gt;{}
    },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next &lt;a href=&quot;/blog/articles/qunit-and-js-test-driver/QUnitToTestCases.js&quot;&gt;download QUnitToTestCases.js&lt;/a&gt; and save it to the same folder as &lt;code&gt;testrunner.js&lt;/code&gt;. This is the file which converts the qunit tests into TestCases that JS Test Driver understands.&lt;/p&gt;
&lt;p&gt;It works by overriding the qunit &lt;code&gt;test()&lt;/code&gt; function, and rather than adding the test to qunit, it creates a test method on a TestCase object which, when called by JS Test Driver adds the test to qunit and runs it.&lt;/p&gt;
&lt;h2 id=&quot;configuring-js-test-driver&quot;&gt;Configuring JS Test Driver&lt;/h2&gt;
&lt;p&gt;Once you have the patched &lt;code&gt;testrunner.js&lt;/code&gt; and &lt;code&gt;QUnitToTestCases.js&lt;/code&gt;, you just need to let JS Test Driver know to load them before your qunit tests. They need to be loaded in order, with  &lt;code&gt;testrunner.js&lt;/code&gt; first, followed by &lt;code&gt;QUnitTiTestCases.js&lt;/code&gt;, as the converter modifies some of the testrunner methods.&lt;/p&gt;
&lt;p&gt;Update your &lt;code&gt;jsTestDriver.conf&lt;/code&gt; to load the files:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-yaml&quot;&gt;server: http://localhost:9876

load:
  # Add these lines to load the testrunner and converter in order, before the tests
  # (assuming the files are saved to tests/qunit/)
  - tests/qunit/testrunner.js
  - tests/qunit/QUnitToTestCases.js

  # This is where we load the qunit tests
  - tests/js/*.js

  # And this loads the source files we are testing
  - src/js/*.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;running-js-test-driver-with-qunit-tests&quot;&gt;Running JS Test Driver with qunit tests&lt;/h2&gt;
&lt;p&gt;Now we can run JS Test Driver and watch as it runs all our qunit tests!&lt;/p&gt;
&lt;p&gt;The tests will run as individual JS Test Driver tests, with the format &lt;code&gt;_Module Name_._Test Name_&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-plain&quot;&gt;[PASSED] Module 1.test Test 1
[PASSED] Module 1.test Test 2
[PASSED] Module 2.test Test 1
Total 3 tests (Passed: 3; Fails: 0; Errors: 0) (1.00 ms)
  Safari 530.18: Run 3 tests (Passed: 3; Fails: 0; Errors 0) (1.00 ms)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;
&lt;p&gt;There are a few limitations on which qunit tests will successfully be converted.&lt;/p&gt;
&lt;p&gt;The tests must run synchronously (which means no use of the qunit &lt;code&gt;stop&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt; methods).&lt;/p&gt;
&lt;p&gt;Module lifecycles are ignored at the moment, which means &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; functions are not called.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Autotest Growl notifications on Windows (using Snarl)</title>
      <link>//blog/articles/autotest-growl-notifications-on-windows-using-snarl/</link>
      <pubDate>Fri, 19 Jun 2009 12:31:18 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/autotest-growl-notifications-on-windows-using-snarl/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;/articles/simple-example-of-autotest-cucumber-and-growl/&quot;&gt;Growl and Autotest work brilliantly together&lt;/a&gt;. Autotest runs all your tests in the background every time a file changes, giving you extremely fast feedback on your test driven development. And Growl notifications save you from needing to flip back to the Terminal to see the result of each test run, you get an unobtrusive popup in the corner of your screen showing the success or failure of the tests.&lt;/p&gt;
&lt;p&gt;But what about those users working on the Windows platform?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.fullphat.net/index.php&quot;&gt;Snarl&lt;/a&gt; is a windows counterpart to Growl. Providing much of the same functionality.&lt;/p&gt;
&lt;p&gt;And there is a Snarl Ruby gem allowing us to create Snarl notifications from Ruby.&lt;/p&gt;
&lt;p&gt;So lets convert our Growl calls to Snarl calls, and get Autotest notifications under Windows.&lt;/p&gt;
&lt;h2 id=&quot;installing-autotest-snarl-and-the-growl-to-snarl-converter&quot;&gt;Installing Autotest, Snarl, and the Growl to Snarl converter&lt;/h2&gt;
&lt;p&gt;If you haven’t already &lt;a href=&quot;http://www.ruby-lang.org/en/downloads/&quot;&gt;download and install Ruby&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First up we need to &lt;a href=&quot;http://www.fullphat.net/index.php&quot;&gt;download and install Snarl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then we need to install Autotest and the autotest-growl gem (that we are later going to override). Open a command prompt, and type the following (Autotest is part of the ZenTest gem):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;gem install ZenTest
gem install ruby-snarl
gem install autotest-growl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then save the code below to &lt;code&gt;lib/autotest/growl-to-snarl.rb&lt;/code&gt; within your project. This code converts any Growl calls to equivalent Snarl calls.&lt;/p&gt;
&lt;h4 id=&quot;growl-to-snarl-rb&quot;&gt;growl-to-snarl.rb&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'snarl'&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Autotest::Growl&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;# Display a message through Snarl.&lt;/span&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;growl&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;message&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;icon&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;priority=&lt;/span&gt;0, &lt;span class=&quot;title&quot;&gt;stick=&lt;/span&gt;&quot;&quot;&lt;/span&gt;
    image = &lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.join(&lt;span class=&quot;constant&quot;&gt;ENV&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;'HOME'&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;'.autotest-growl'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#{icon}&lt;/span&gt;.png&quot;&lt;/span&gt;)
    image = &lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.join(&lt;span class=&quot;constant&quot;&gt;GEM_PATH&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'img'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#{icon}&lt;/span&gt;.png&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.exists?(image)

    &lt;span class=&quot;constant&quot;&gt;Snarl&lt;/span&gt;.show_message(title, message.inspect, image)
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we need to update our &lt;code&gt;.autotest&lt;/code&gt; configuration file to include the autotest-growl gem, and the Growl to Snarl converter. Add the following to your &lt;code&gt;.autotest&lt;/code&gt; file in the project root directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'autotest-growl'&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'snarl'&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'lib/autotest/growl-to-snarl'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;running-autotest-with-snarl-support&quot;&gt;Running Autotest with Snarl support&lt;/h2&gt;
&lt;p&gt;First up ensure Snarl is running (check for the icon in the system tray).&lt;/p&gt;
&lt;p&gt;Autotest will fail to run on Windows if a &lt;code&gt;HOME&lt;/code&gt; environment variable doesn’t exist, so we need to create one before we run (I’ve also noticed that the Ruby &lt;code&gt;gem&lt;/code&gt; command will fail to run if the &lt;code&gt;HOME&lt;/code&gt; evironment variable &lt;em&gt;does&lt;/em&gt; exist, which is frustrating!).&lt;/p&gt;
&lt;p&gt;Open a command prompt, navigate to the project root directory. Then enter the following to set the &lt;code&gt;HOME&lt;/code&gt; environment variable and run Autotest.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; HOME=&lt;span class=&quot;string&quot;&gt;&quot;C:\Documents and Settings\username&quot;&lt;/span&gt;
autotest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results of your test runs should now display as Snarl notifications.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Autotest and JS Test Driver</title>
      <link>//blog/articles/autotest-and-js-test-driver/</link>
      <pubDate>Fri, 19 Jun 2009 11:51:26 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/autotest-and-js-test-driver/</guid>
      <author></author>
      <description>&lt;p&gt;Google recently released a new Javascript testing framework, &lt;a href=&quot;http://code.google.com/p/js-test-driver/&quot;&gt;JS Test Driver&lt;/a&gt;. It provides incredibly fast execution for Javascript unit tests, and can be run from the command line without the need for manual control of browsers. Check out this &lt;a href=&quot;http://misko.hevery.com/2009/05/22/yet-another-javascript-testing-framework/&quot;&gt;introduction to JS Test Driver by Miško Hevery&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fast test execution and the ability to be run from the command line make it a perfect fit to integrate into the Autotest test cycle. So I have.&lt;/p&gt;
&lt;p&gt;The module below hooks into Autotest just before the normal tests are run. It runs JS Test Driver over all the tests in the project, outputs the results, and finally fires off a &lt;code&gt;:ran_js_test_driver&lt;/code&gt; hook.&lt;/p&gt;
&lt;p&gt;Errors and failed tests will automatically be notified through &lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt; (if Growl and &lt;a href=&quot;http://github.com/svoop/autotest-growl/tree/master&quot;&gt;autotest-growl&lt;/a&gt; are installed). By default successful tests runs are not notified through Growl, in order to keep distracting popups to a minimum.&lt;/p&gt;
&lt;h2 id=&quot;installing-autotest-js-test-driver&quot;&gt;Installing Autotest JS Test Driver&lt;/h2&gt;
&lt;p&gt;First you need to &lt;a href=&quot;http://code.google.com/p/js-test-driver/downloads/list&quot;&gt;download a copy of JS Test Driver&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Save the JS Test Driver jar file to the &lt;code&gt;lib/&lt;/code&gt; directory within your project.&lt;/p&gt;
&lt;p&gt;Then copy the code below to &lt;code&gt;lib/autotest/js-test-driver.rb&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;js-test-driver-rb&quot;&gt;js-test-driver.rb&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Run JS Test Driver as part of autotest&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# Supports Growl notifications if using autotest-growl&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'autotest'&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Autotest::JsTestDriver&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;variable&quot;&gt;@@jar&lt;/span&gt; = &lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.dirname(__FILE_&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;'/JsTestDriver-1.0b.jar'&lt;/span&gt;
    &lt;span class=&quot;variable&quot;&gt;@@config_file&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;'jsTestDriver.conf'&lt;/span&gt;

    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;jar=&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string)&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;@@jar&lt;/span&gt; = string
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;config_file=&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string)&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;@@config_file&lt;/span&gt; = string
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;show_success=&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(bool)&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;@@show_success&lt;/span&gt;=bool
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;constant&quot;&gt;Autotest&lt;/span&gt;.add_hook &lt;span class=&quot;symbol&quot;&gt;:run_command&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |at|
        &lt;span class=&quot;comment&quot;&gt;# run js test driver&lt;/span&gt;
        results = &lt;span class=&quot;string&quot;&gt;'JS Test Driver:'&lt;/span&gt;
        results += &lt;span class=&quot;string&quot;&gt;`java -jar &quot;&lt;span class=&quot;subst&quot;&gt;#{&lt;span class=&quot;variable&quot;&gt;@@jar&lt;/span&gt;}&lt;/span&gt;&quot; --config &quot;&lt;span class=&quot;subst&quot;&gt;#{&lt;span class=&quot;variable&quot;&gt;@@config_file&lt;/span&gt;}&lt;/span&gt;&quot; --tests all --verbose`&lt;/span&gt;
        puts results

        at.results = [] &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; at.results.&lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;?
        at.results.concat(results.split(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;))

        at.hook &lt;span class=&quot;symbol&quot;&gt;:ran_js_test_driver&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Autotest::Growl&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;variable&quot;&gt;@@show_js_test_success&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;

    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;show_js_test_success=&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(bool)&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;@@show_js_test_success&lt;/span&gt;=bool
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;# Growl results of JS Test Driver&lt;/span&gt;
  &lt;span class=&quot;constant&quot;&gt;Autotest&lt;/span&gt;.add_hook &lt;span class=&quot;symbol&quot;&gt;:ran_js_test_driver&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |autotest|

    gist = autotest.results.grep( &lt;span class=&quot;regexp&quot;&gt;/Total\s+\d+\s+tests/&lt;/span&gt; ).join(&lt;span class=&quot;string&quot;&gt;&quot; / &quot;&lt;/span&gt;).strip()

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; gist == &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;
      growl &lt;span class=&quot;variable&quot;&gt;@label&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;'Cannot run JS Test Driver.'&lt;/span&gt;, gist, &lt;span class=&quot;string&quot;&gt;'error'&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; gist =~ &lt;span class=&quot;regexp&quot;&gt;/Errors:\s+[1-9]\d*/&lt;/span&gt;
        growl &lt;span class=&quot;variable&quot;&gt;@label&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;'Error running some JS tests.'&lt;/span&gt;, gist, &lt;span class=&quot;string&quot;&gt;'failed'&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;elsif&lt;/span&gt; gist =~ &lt;span class=&quot;regexp&quot;&gt;/Fails:\s+[1-9]\d*/&lt;/span&gt;
        growl &lt;span class=&quot;variable&quot;&gt;@label&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;'JS Test: Some tests failed.'&lt;/span&gt;, gist, &lt;span class=&quot;string&quot;&gt;'failed'&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;@@show_js_test_success&lt;/span&gt;
        growl &lt;span class=&quot;variable&quot;&gt;@label&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;'JS Test: All files are clean.'&lt;/span&gt;, gist, &lt;span class=&quot;string&quot;&gt;'passed'&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;configuring-autotest-and-js-test-driver&quot;&gt;Configuring Autotest and JS Test Driver&lt;/h2&gt;
&lt;p&gt;JS Test Driver uses a configuration file to connect with the JS Test Driver server, and to decide which javscript files to load.&lt;/p&gt;
&lt;p&gt;Create a &lt;code&gt;jsTestDriver.conf&lt;/code&gt; file in the project root directory as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-yaml&quot;&gt;server: http://localhost:9876

load:
  - src/js/*.js
  - tests/js/*.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This assumes that you have our javascript source files will be in the &lt;code&gt;src/js/&lt;/code&gt; directory, and our javascript test files will be in the &lt;code&gt;src/js/&lt;/code&gt; directory. We will create a test file, and associated code later.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;server:&lt;/code&gt; lets JS Test Driver know we will be connecting to a server on our local machine, on port 9876. We’ll get this server running later.&lt;/p&gt;
&lt;p&gt;Next we need to configure Autotest to run JS Test Driver, by requiring the module and specifying the location of the JS Test Driver jar.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Require the JS Test Driver module&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'lib/autotest/js-test-driver'&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;# Set the location of the JS Test Driver jar&lt;/span&gt;
&lt;span class=&quot;constant&quot;&gt;Autotest::JsTestDriver::&lt;/span&gt;jar = &lt;span class=&quot;string&quot;&gt;'./lib/jsTestDriver-1.0b.jar'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also configure the location of the JS Test Driver config file, and whether or not to show successful test runs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Uncomment this if you have autotest-growl, and Growl installed&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# And want to have notifications of JS Test Driver runs&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# require 'autotest/growl'&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;# Uncomment this to change the location of the JS Test Driver config file&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# By default we look for a jsTestDriver.conf file in the directory autotest is run from&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# Autotest::JsTestDriver::config_file = './jsTestDriver.conf'&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;# Uncomment this to show successful test runs&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# Autotest::Growl::show_js_test_success = true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that all the installation and configuration is done, let get everything running.&lt;/p&gt;
&lt;h2 id=&quot;running-autotest-with-js-test-driver&quot;&gt;Running Autotest with JS Test Driver&lt;/h2&gt;
&lt;p&gt;First up we need to get our JS Test Driver server up and running. Open a Terminal, and navigate to the directory containing the JS Test Driver jar. Run the following to start a server:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;java -jar JsTestDriver-&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;b.jar --port &lt;span class=&quot;number&quot;&gt;9876&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to capture a browser to use for testing. Open a browser and automatically capture it for use with JS Test Driver by going to the following URL:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:9876/capture
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can run autotest, and watch as it runs JS Test Driver and reports the results to us on every file change:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;autotest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JS Test Driver will probably report that no tests were run, as we haven’t written any tests yet. Tests are written using the &lt;a href=&quot;http://code.google.com/p/js-test-driver/wiki/TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; object, which exposes JUnit style functionality.&lt;/p&gt;
&lt;h2 id=&quot;writing-some-tests&quot;&gt;Writing Some Tests&lt;/h2&gt;
&lt;p&gt;Here is an example test file, and the production code it tests:&lt;/p&gt;
&lt;h4 id=&quot;greetertest-js&quot;&gt;GreeterTest.js&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;GreeterTest = TestCase(&lt;span class=&quot;string&quot;&gt;&quot;GreeterTest&quot;&lt;/span&gt;);

GreeterTest.prototype.testGreet = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; greeter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; myapp.Greeter();
  assertEquals(&lt;span class=&quot;string&quot;&gt;&quot;Hello World.&quot;&lt;/span&gt;, greeter.greet(&lt;span class=&quot;string&quot;&gt;&quot;World&quot;&lt;/span&gt;));
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;greeter-js&quot;&gt;Greeter.js&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;myapp = {};

myapp.Greeter = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{ };

myapp.Greeter.prototype.greet = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello &quot;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&quot;!&quot;&lt;/span&gt;;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you copy these to your &lt;code&gt;tests/js/&lt;/code&gt; and &lt;code&gt;src/js/&lt;/code&gt; directories respectively, Autotest should pick up the new files, run the tests and notify you that there is an error. See if you can spot it :P&lt;/p&gt;
&lt;h2 id=&quot;to-do&quot;&gt;To Do&lt;/h2&gt;
&lt;p&gt;This would be nice packaged up as a gem. It would also be nice if failed Javascript tests could stop further tests being run.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Simple example of Autotest, Cucumber, and Growl</title>
      <link>//blog/articles/simple-example-of-autotest-cucumber-and-growl/</link>
      <pubDate>Wed, 17 Jun 2009 16:47:09 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/simple-example-of-autotest-cucumber-and-growl/</guid>
      <author></author>
      <description>&lt;p&gt;As an example of getting Autotest, Cucumber, and Growl up and running I’ve created a super simple test project. You can &lt;a href=&quot;/blog/articles/simple-example-of-autotest-cucumber-and-growl/Autotest-Cucumber.zip&quot;&gt;download the example project&lt;/a&gt;, or just create it from the code on this post.&lt;/p&gt;
&lt;h2 id=&quot;install-ruby-growl-and-gems&quot;&gt;Install Ruby, Growl, and Gems&lt;/h2&gt;
&lt;p&gt;First up we need to ensure that we have all our dependancies installed.&lt;/p&gt;
&lt;p&gt;If you haven’t already, &lt;a href=&quot;http://www.ruby-lang.org/en/downloads/&quot;&gt;download and install Ruby&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then we need to install the Autotest, Cucumber, and Growl Ruby gems. We can do this using the &lt;code&gt;gem&lt;/code&gt; command that comes packaged with Ruby.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Autotest test is part of the ZenTest gem&lt;/span&gt;
sudo gem install ZenTest
sudo gem install cucumber
&lt;span class=&quot;comment&quot;&gt;# Use my modified autotest-growl gem (until the changes are merged into the official gem)&lt;/span&gt;
sudo gem install karl-autotest-growl --source http://gems.github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we need to ensure that the Growl application itself is installed. If not &lt;a href=&quot;http://growl.info/&quot;&gt;download and install Growl&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;create-project&quot;&gt;Create Project&lt;/h2&gt;
&lt;p&gt;Now we are ready to create our project. The either &lt;a href=&quot;/blog/articles/simple-example-of-autotest-cucumber-and-growl/Autotest-Cucumber.zip&quot;&gt;download the example project&lt;/a&gt; or create the file heirarchy below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[dir] Autotest-Cucumber&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[file] .autotest&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[dir] features&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   [file] test.feature
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Copy the code below into the &lt;code&gt;.autotest&lt;/code&gt; file:&lt;/p&gt;
&lt;h4 id=&quot;-autotest&quot;&gt;.autotest&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'autotest/growl'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the copy the following into the &lt;code&gt;test.feature&lt;/code&gt; file:&lt;/p&gt;
&lt;h4 id=&quot;test-feature&quot;&gt;test.feature&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cucumber&quot;&gt;Feature:

    Scenario:
        Given I save 1
        Then I have 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;set-environment&quot;&gt;Set Environment&lt;/h2&gt;
&lt;p&gt;Lastly we need to set the AUTOFEATURE environment variable to true, so that &lt;a href=&quot;http://wiki.github.com/aslakhellesoy/cucumber/autotest-integration&quot;&gt;autotest will run the Cucumber tests automatically&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;AUTOFEATURE=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;run-autotest-&quot;&gt;Run Autotest!&lt;/h2&gt;
&lt;p&gt;Finally we can run autotest, and watch as it picks up the Cucumber tests, runs them, and notifies us via Growl. Open terminal and navigate to the project directory. Then run autotest:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;autotest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Autotest will initiate a Cucumber run. Cucumber will pick up the &lt;code&gt;test.feature&lt;/code&gt; file (because it looks for a &lt;code&gt;features&lt;/code&gt; folder by default). The Cucumber run will show that you have 1 undefined scenario (and be kind enough to give you the code for your undefined steps). And finally Growl will display a notification that you have 1 undefined scenario, yay!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-plain&quot;&gt;c:/ruby/bin/ruby c:/ruby/lib/ruby/gems/1.8/gems/aslakhellesoy-cucumber-0.3.11.3/bin/cucumber --format progress --format rerun --out C:/Temp/autotest-cucumber.17824.1 features
UU

1 scenario (1 undefined)
2 steps (2 undefined)
0m0.000s

You can implement step definitions for undefined steps with these snippets:

Given /^I save 1$/ do
  pending
end

Then /^I have 1$/ do
  pending
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Patched Cucumber notifications in autotest-growl gem</title>
      <link>//blog/articles/patched-cucumber-notifications-in-autotest-growl-gem/</link>
      <pubDate>Mon, 15 Jun 2009 21:17:30 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/patched-cucumber-notifications-in-autotest-growl-gem/</guid>
      <author></author>
      <description>&lt;p&gt;Following on to my &lt;a href=&quot;/articles/autotest-cucumber-and-growl/&quot;&gt;previous post on Autotest, Cucumber, and Growl&lt;/a&gt;, I have forked the autotest-growl repository, and applied my fix for Cucumber notifications.&lt;/p&gt;
&lt;p&gt;You find my &lt;a href=&quot;http://github.com/karl/autotest-growl/tree/master&quot;&gt;patched version of autotest-growl on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can switch to this version of autotest-growl by uninstalling any existing version, and then installing from my fork on GitHub:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;sudo gem uninstall autotest-growl
sudo gem install karl-autotest-growl --source http://gems.github.com
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Javascript Lint with Autotest</title>
      <link>//blog/articles/javascript-lint-with-autotest/</link>
      <pubDate>Mon, 15 Jun 2009 10:00:00 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/javascript-lint-with-autotest/</guid>
      <author></author>
      <description>&lt;p&gt;As well as using &lt;a href=&quot;/articles/autotest-cucumber-and-growl/&quot;&gt;Autotest to run Cucumber scenarios&lt;/a&gt; I have also been looking into integrating lower level test into the Autotest cycle.&lt;/p&gt;
&lt;p&gt;My first attempt at this is a small module to run &lt;a href=&quot;http://javascriptlint.com/&quot;&gt;Javascript Lint&lt;/a&gt; on all the javascript files within a project any time any file changes.&lt;/p&gt;
&lt;p&gt;The module below hooks in to Autotest just before the tests are normally run. It runs javascript lint over all the &lt;code&gt;*.js&lt;/code&gt; files in the project, outputs the results to the autotest results object and the standard output, and finally fires a new &lt;code&gt;ran_javascript_lint&lt;/code&gt; hook&lt;/p&gt;
&lt;p&gt;Errors and warnings found by Javascript Lint will also be notified through &lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt; (if Growl and &lt;a href=&quot;http://github.com/svoop/autotest-growl/tree/master&quot;&gt;autotest-growl&lt;/a&gt; are installed). If there are no errors or warnings than no Growl notification is shown. This keeps distracting popups to a minimum.&lt;/p&gt;
&lt;h2 id=&quot;installing-autotest-javascript-lint&quot;&gt;Installing Autotest Javascript Lint&lt;/h2&gt;
&lt;p&gt;First up, &lt;a href=&quot;http://javascriptlint.com/download.htm&quot;&gt;download Javascript Lint&lt;/a&gt;. Extract the &lt;code&gt;jsl&lt;/code&gt; executable to &lt;code&gt;lib/autotest/&lt;/code&gt; within your project.&lt;/p&gt;
&lt;p&gt;Copy the code below to &lt;code&gt;lib/autotest/javascript-lint.rb&lt;/code&gt; within your project (the same directory where you have the &lt;code&gt;jsl&lt;/code&gt; execuatable).&lt;/p&gt;
&lt;h4 id=&quot;javascript-lint-rb&quot;&gt;javascript-lint.rb&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Run Javascript Lint as part of autotest&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# Supports Growl notifications if using autotest-growl&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# Version 1.0&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'autotest'&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Autotest::JavascriptLint&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;variable&quot;&gt;@@js_dir&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;
    &lt;span class=&quot;variable&quot;&gt;@@jsl_dir&lt;/span&gt; = &lt;span class=&quot;constant&quot;&gt;File&lt;/span&gt;.dirname(__FILE_&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;
    &lt;span class=&quot;variable&quot;&gt;@@config_file&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;

    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;js_dir=&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string)&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;@@js_dir&lt;/span&gt; = string
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;jsl_dir=&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string)&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;@@jsl_dir&lt;/span&gt; = string
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;config_file=&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string)&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;@@config_file&lt;/span&gt; = string
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;constant&quot;&gt;Autotest&lt;/span&gt;.add_hook &lt;span class=&quot;symbol&quot;&gt;:run_command&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |at|

        &lt;span class=&quot;comment&quot;&gt;# run javascript lint&lt;/span&gt;
        results = &lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;#{&lt;span class=&quot;variable&quot;&gt;@@jsl_dir&lt;/span&gt;}&lt;/span&gt;jsl -conf &quot;&lt;span class=&quot;subst&quot;&gt;#{&lt;span class=&quot;variable&quot;&gt;@@config_file&lt;/span&gt;}&lt;/span&gt;&quot;  -process &quot;&lt;span class=&quot;subst&quot;&gt;#{&lt;span class=&quot;variable&quot;&gt;@@js_dir&lt;/span&gt;}&lt;/span&gt;*.js&quot; +recurse`&lt;/span&gt;
        puts results

        at.results = [] &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; at.results.&lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;?
        at.results.concat(results.split(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;))

        at.hook &lt;span class=&quot;symbol&quot;&gt;:ran_javascript_lint&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Autotest::Growl&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;variable&quot;&gt;@@show_js_lint_success&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;

    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;show_js_lint_success=&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(bool)&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;@@show_js_lint_success&lt;/span&gt;=bool
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;comment&quot;&gt;# Growl results of Javscript Lint&lt;/span&gt;
    &lt;span class=&quot;constant&quot;&gt;Autotest&lt;/span&gt;.add_hook &lt;span class=&quot;symbol&quot;&gt;:ran_javascript_lint&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |autotest|
        gist = autotest.results.grep(&lt;span class=&quot;regexp&quot;&gt;/\d+\s+error.*,\s+\d+\s+warning.*/&lt;/span&gt;).join(&lt;span class=&quot;string&quot;&gt;&quot; / &quot;&lt;/span&gt;).strip()

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; gist == &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;
            growl &lt;span class=&quot;variable&quot;&gt;@label&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;'Cannot run javascript lint.'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'error'&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; gist =~ &lt;span class=&quot;regexp&quot;&gt;/[1-9]\d*\s+(error)/&lt;/span&gt;
                growl &lt;span class=&quot;variable&quot;&gt;@label&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;'Lint: Some files have errors.'&lt;/span&gt;, gist, &lt;span class=&quot;string&quot;&gt;'failed'&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;elsif&lt;/span&gt; gist =~ &lt;span class=&quot;regexp&quot;&gt;/[1-9]\d*\s+(warning)/&lt;/span&gt;
                growl &lt;span class=&quot;variable&quot;&gt;@label&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;'Lint: Some files have warnings.'&lt;/span&gt;, gist, &lt;span class=&quot;string&quot;&gt;'pending'&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;@@show_js_lint_success&lt;/span&gt;
                growl &lt;span class=&quot;variable&quot;&gt;@label&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;'Lint: All files are clean.'&lt;/span&gt;, gist, &lt;span class=&quot;string&quot;&gt;'passed'&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then add Autotest Javascript Lint to your &lt;code&gt;.autotest&lt;/code&gt; configuration file within the base of your project.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'lib/autotest/javascript-lint'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;to-do&quot;&gt;To Do&lt;/h2&gt;
&lt;p&gt;This could be packaged as a gem for easy installation, and it could possibly be modified to only run over changed files.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Autotest, Cucumber, and Growl</title>
      <link>//blog/articles/autotest-cucumber-and-growl/</link>
      <pubDate>Mon, 15 Jun 2009 07:19:17 +0100</pubDate>
      <guid isPermaLink="true">//blog/articles/autotest-cucumber-and-growl/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://ph7spot.com/articles/getting_started_with_autotest&quot;&gt;Autotest&lt;/a&gt; is a great Ruby tool to speed up test driven development by automatically running your tests every time a file is saved.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cukes.info/&quot;&gt;Cucumber&lt;/a&gt; is an awesome tool for doing behavioural driven development. It allows you to write plain text automated acceptance tests.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wiki.github.com/aslakhellesoy/cucumber/autotest-integration&quot;&gt;Autotest and Cucumber work together seamlessly&lt;/a&gt;, you just need to set the &lt;code&gt;AUTOFEATURE&lt;/code&gt; environment variable to true:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ AUTOFEATURE=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt; is an excellent notification system for OSX that allows applications to popup unobtrusive messages on the users desktop. (&lt;a href=&quot;http://www.fullphat.net/index.php&quot;&gt;Snarl&lt;/a&gt; is the equivalent for windows)&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;http://github.com/svoop/autotest-growl/tree/master&quot;&gt;add Growl support to Autotest (using the autotest-growl gem)&lt;/a&gt; so that you get popup notifications of test results.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But the current version of autotest-growl doesn’t provide notifications for the result of Autotest Cucumber runs.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;cucumber-growl-support-in-autotest&quot;&gt;Cucumber Growl support in Autotest&lt;/h2&gt;
&lt;p&gt;So I’ve added support for notification of Autotest Cucumber results using growl. It’s super simple at the moment as I’m still pretty new at Ruby.&lt;/p&gt;
&lt;p&gt;You need to have Autotest (part of the ZenTest gem), Autotest-Growl, and Growl already installed.&lt;/p&gt;
&lt;p&gt;Save the code below to the file &lt;code&gt;growl-cucumber.rb&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;growl-cucumber-rb&quot;&gt;growl-cucumber.rb&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'autotest'&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Autotest::Growl&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;# Growl results of Cucumber&lt;/span&gt;
  &lt;span class=&quot;constant&quot;&gt;Autotest&lt;/span&gt;.add_hook &lt;span class=&quot;symbol&quot;&gt;:ran_features&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |autotest|

    gist = autotest.results.grep(&lt;span class=&quot;regexp&quot;&gt;/\d+\s+scenario.*\)/&lt;/span&gt;).join(&lt;span class=&quot;string&quot;&gt;&quot; / &quot;&lt;/span&gt;).strip()
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; gist == &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;
      growl &lt;span class=&quot;variable&quot;&gt;@label&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;'Cannot run features.'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'error'&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; gist =~ &lt;span class=&quot;regexp&quot;&gt;/[1-9]\d*\s+(failed)/&lt;/span&gt;
        growl &lt;span class=&quot;variable&quot;&gt;@label&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;'Some features have failed.'&lt;/span&gt;, gist, &lt;span class=&quot;string&quot;&gt;'failed'&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;elsif&lt;/span&gt; gist =~ &lt;span class=&quot;regexp&quot;&gt;/pending/&lt;/span&gt;
        growl &lt;span class=&quot;variable&quot;&gt;@label&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;'Some features are skipped.'&lt;/span&gt;, gist, &lt;span class=&quot;string&quot;&gt;'skipped'&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
        growl &lt;span class=&quot;variable&quot;&gt;@label&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;'All features have passed.'&lt;/span&gt;, gist, &lt;span class=&quot;string&quot;&gt;'passed'&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then update your .autotest configuration file to include the new growl-cucumber file:&lt;/p&gt;
&lt;h4 id=&quot;-autotest&quot;&gt;.autotest&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Add the growl and growl-cucumber requires to your .autotest config file &lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'autotest/growl'&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'autotest/growl-cucumber'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&quot;to-do&quot;&gt;To Do&lt;/h2&gt;
&lt;p&gt;I need to see if this can be integrated with the existing autotest-growl gem.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>